/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * MME API Documentation
 * 
      API documentation for Meu Mentor Eiffel system
      
      ## Authentication
      This API uses Firebase Authentication with Bearer tokens.
      
      ## Base URL
      - Development: http://localhost:3000/api
      - Production: https://your-domain.com/api
      
      ## Rate Limiting
      - 100 requests per 15 minutes per IP
      - Additional limits may apply to specific endpoints
      
      ## Error Handling
      All endpoints return consistent error responses with proper HTTP status codes.
    
 * OpenAPI spec version: 1.0.0
 */
import type {
  BulkNotificationDto,
  CreateNotificationDto,
  NotificationPreferencesResponseDto,
  NotificationResponseDto,
  NotificationStatsDto,
  NotificationsClearAllNotifications200,
  NotificationsCreateBulkNotifications201,
  NotificationsDeleteNotification200,
  NotificationsGetNotificationAnalytics200,
  NotificationsGetNotificationAnalyticsParams,
  NotificationsGetNotificationTemplates200Item,
  NotificationsGetUserNotificationsParams,
  NotificationsListResponseDto,
  NotificationsMarkAllAsRead200,
  NotificationsMarkAsRead200,
  NotificationsNotifyIncomingCallBody,
  NotificationsNotifyMenteeAssignedBody,
  NotificationsNotifyNewMessageBody,
  NotificationsNotifyReportGeneratedBody,
  NotificationsNotifySessionStartedBody,
  NotificationsSendSystemAnnouncementBody,
  UpdateNotificationPreferencesDto,
} from ".././model";

import { customInstance } from "../../custom-instance";

export const getNotifications = () => {
  /**
   * Create a new notification for a specific user. Only coordinators and mentors can create notifications.
   * @summary Create notification
   */
  const notificationsCreateNotification = (
    createNotificationDto: CreateNotificationDto,
  ) => {
    return customInstance<NotificationResponseDto>({
      url: `/api/notifications`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createNotificationDto,
    });
  };
  /**
   * Create notifications for multiple users at once. Only coordinators can create bulk notifications.
   * @summary Create bulk notifications
   */
  const notificationsCreateBulkNotifications = (
    bulkNotificationDto: BulkNotificationDto,
  ) => {
    return customInstance<NotificationsCreateBulkNotifications201>({
      url: `/api/notifications/bulk`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: bulkNotificationDto,
    });
  };
  /**
   * Retrieve paginated list of notifications for a specific user. Users can only access their own notifications.
   * @summary Get user notifications
   */
  const notificationsGetUserNotifications = (
    userId: string,
    params?: NotificationsGetUserNotificationsParams,
  ) => {
    return customInstance<NotificationsListResponseDto>({
      url: `/api/notifications/users/${userId}`,
      method: "GET",
      params,
    });
  };
  /**
   * Mark a specific notification as read. Users can only mark their own notifications as read.
   * @summary Mark notification as read
   */
  const notificationsMarkAsRead = (userId: string, notificationId: string) => {
    return customInstance<NotificationsMarkAsRead200>({
      url: `/api/notifications/users/${userId}/${notificationId}/read`,
      method: "PUT",
    });
  };
  /**
   * Mark all unread notifications as read for a user. Users can only mark their own notifications as read.
   * @summary Mark all notifications as read
   */
  const notificationsMarkAllAsRead = (userId: string) => {
    return customInstance<NotificationsMarkAllAsRead200>({
      url: `/api/notifications/users/${userId}/read-all`,
      method: "PUT",
    });
  };
  /**
   * Delete a specific notification. Users can only delete their own notifications.
   * @summary Delete notification
   */
  const notificationsDeleteNotification = (
    userId: string,
    notificationId: string,
  ) => {
    return customInstance<NotificationsDeleteNotification200>({
      url: `/api/notifications/users/${userId}/${notificationId}`,
      method: "DELETE",
    });
  };
  /**
   * Delete all notifications for a user. Users can only clear their own notifications.
   * @summary Clear all notifications
   */
  const notificationsClearAllNotifications = (userId: string) => {
    return customInstance<NotificationsClearAllNotifications200>({
      url: `/api/notifications/users/${userId}/clear-all`,
      method: "DELETE",
    });
  };
  /**
   * Get comprehensive notification statistics for a user. Users can only see their own stats.
   * @summary Get notification statistics
   */
  const notificationsGetNotificationStats = (userId: string) => {
    return customInstance<NotificationStatsDto>({
      url: `/api/notifications/users/${userId}/stats`,
      method: "GET",
    });
  };
  /**
   * Get user notification preferences and settings. Users can only see their own preferences.
   * @summary Get notification preferences
   */
  const notificationsGetNotificationPreferences = (userId: unknown) => {
    return customInstance<NotificationPreferencesResponseDto>({
      url: `/api/notifications/users/${userId}/preferences`,
      method: "GET",
    });
  };
  /**
   * Update user notification preferences and settings. Users can only update their own preferences.
   * @summary Update notification preferences
   */
  const notificationsUpdateNotificationPreferences = (
    userId: string,
    updateNotificationPreferencesDto: UpdateNotificationPreferencesDto,
  ) => {
    return customInstance<NotificationPreferencesResponseDto>({
      url: `/api/notifications/users/${userId}/preferences`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: updateNotificationPreferencesDto,
    });
  };
  /**
   * Send notifications when a mentoring session starts
   * @summary Notify session started
   */
  const notificationsNotifySessionStarted = (
    notificationsNotifySessionStartedBody: NotificationsNotifySessionStartedBody,
  ) => {
    return customInstance<void>({
      url: `/api/notifications/session/started`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: notificationsNotifySessionStartedBody,
    });
  };
  /**
   * Send notification when a new message is received
   * @summary Notify new message
   */
  const notificationsNotifyNewMessage = (
    notificationsNotifyNewMessageBody: NotificationsNotifyNewMessageBody,
  ) => {
    return customInstance<void>({
      url: `/api/notifications/message/received`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: notificationsNotifyNewMessageBody,
    });
  };
  /**
   * Send notification for incoming call
   * @summary Notify incoming call
   */
  const notificationsNotifyIncomingCall = (
    notificationsNotifyIncomingCallBody: NotificationsNotifyIncomingCallBody,
  ) => {
    return customInstance<void>({
      url: `/api/notifications/call/incoming`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: notificationsNotifyIncomingCallBody,
    });
  };
  /**
   * Send notifications when a mentee is assigned to a mentor
   * @summary Notify mentee assignment
   */
  const notificationsNotifyMenteeAssigned = (
    notificationsNotifyMenteeAssignedBody: NotificationsNotifyMenteeAssignedBody,
  ) => {
    return customInstance<void>({
      url: `/api/notifications/assignment/mentee`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: notificationsNotifyMenteeAssignedBody,
    });
  };
  /**
   * Send notification when a report is generated
   * @summary Notify report generated
   */
  const notificationsNotifyReportGenerated = (
    notificationsNotifyReportGeneratedBody: NotificationsNotifyReportGeneratedBody,
  ) => {
    return customInstance<void>({
      url: `/api/notifications/report/generated`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: notificationsNotifyReportGeneratedBody,
    });
  };
  /**
   * Send system-wide announcement to all users or specific users
   * @summary Send system announcement
   */
  const notificationsSendSystemAnnouncement = (
    notificationsSendSystemAnnouncementBody: NotificationsSendSystemAnnouncementBody,
  ) => {
    return customInstance<void>({
      url: `/api/notifications/system/announcement`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: notificationsSendSystemAnnouncementBody,
    });
  };
  /**
   * Get system-wide notification analytics and insights
   * @summary Get notification analytics overview
   */
  const notificationsGetNotificationAnalytics = (
    params?: NotificationsGetNotificationAnalyticsParams,
  ) => {
    return customInstance<NotificationsGetNotificationAnalytics200>({
      url: `/api/notifications/analytics/overview`,
      method: "GET",
      params,
    });
  };
  /**
   * Get predefined notification templates for common scenarios
   * @summary Get notification templates
   */
  const notificationsGetNotificationTemplates = () => {
    return customInstance<NotificationsGetNotificationTemplates200Item[]>({
      url: `/api/notifications/templates`,
      method: "GET",
    });
  };
  return {
    notificationsCreateNotification,
    notificationsCreateBulkNotifications,
    notificationsGetUserNotifications,
    notificationsMarkAsRead,
    notificationsMarkAllAsRead,
    notificationsDeleteNotification,
    notificationsClearAllNotifications,
    notificationsGetNotificationStats,
    notificationsGetNotificationPreferences,
    notificationsUpdateNotificationPreferences,
    notificationsNotifySessionStarted,
    notificationsNotifyNewMessage,
    notificationsNotifyIncomingCall,
    notificationsNotifyMenteeAssigned,
    notificationsNotifyReportGenerated,
    notificationsSendSystemAnnouncement,
    notificationsGetNotificationAnalytics,
    notificationsGetNotificationTemplates,
  };
};
export type NotificationsCreateNotificationResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getNotifications>["notificationsCreateNotification"]
    >
  >
>;
export type NotificationsCreateBulkNotificationsResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<
        typeof getNotifications
      >["notificationsCreateBulkNotifications"]
    >
  >
>;
export type NotificationsGetUserNotificationsResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getNotifications>["notificationsGetUserNotifications"]
    >
  >
>;
export type NotificationsMarkAsReadResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getNotifications>["notificationsMarkAsRead"]>
  >
>;
export type NotificationsMarkAllAsReadResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getNotifications>["notificationsMarkAllAsRead"]
    >
  >
>;
export type NotificationsDeleteNotificationResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getNotifications>["notificationsDeleteNotification"]
    >
  >
>;
export type NotificationsClearAllNotificationsResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getNotifications>["notificationsClearAllNotifications"]
    >
  >
>;
export type NotificationsGetNotificationStatsResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getNotifications>["notificationsGetNotificationStats"]
    >
  >
>;
export type NotificationsGetNotificationPreferencesResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<
        typeof getNotifications
      >["notificationsGetNotificationPreferences"]
    >
  >
>;
export type NotificationsUpdateNotificationPreferencesResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<
        typeof getNotifications
      >["notificationsUpdateNotificationPreferences"]
    >
  >
>;
export type NotificationsNotifySessionStartedResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getNotifications>["notificationsNotifySessionStarted"]
    >
  >
>;
export type NotificationsNotifyNewMessageResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getNotifications>["notificationsNotifyNewMessage"]
    >
  >
>;
export type NotificationsNotifyIncomingCallResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getNotifications>["notificationsNotifyIncomingCall"]
    >
  >
>;
export type NotificationsNotifyMenteeAssignedResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getNotifications>["notificationsNotifyMenteeAssigned"]
    >
  >
>;
export type NotificationsNotifyReportGeneratedResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getNotifications>["notificationsNotifyReportGenerated"]
    >
  >
>;
export type NotificationsSendSystemAnnouncementResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getNotifications>["notificationsSendSystemAnnouncement"]
    >
  >
>;
export type NotificationsGetNotificationAnalyticsResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<
        typeof getNotifications
      >["notificationsGetNotificationAnalytics"]
    >
  >
>;
export type NotificationsGetNotificationTemplatesResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<
        typeof getNotifications
      >["notificationsGetNotificationTemplates"]
    >
  >
>;

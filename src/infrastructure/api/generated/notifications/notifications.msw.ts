/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * MME API Documentation
 * 
      API documentation for Meu Mentor Eiffel system
      
      ## Authentication
      This API uses Firebase Authentication with Bearer tokens.
      
      ## Base URL
      - Development: http://localhost:3000/api
      - Production: https://your-domain.com/api
      
      ## Rate Limiting
      - 100 requests per 15 minutes per IP
      - Additional limits may apply to specific endpoints
      
      ## Error Handling
      All endpoints return consistent error responses with proper HTTP status codes.
    
 * OpenAPI spec version: 1.0.0
 */
import { faker } from "@faker-js/faker";

import { HttpResponse, delay, http } from "msw";

import type {
  NotificationPreferencesResponseDto,
  NotificationResponseDto,
  NotificationStatsDto,
  NotificationsClearAllNotifications200,
  NotificationsCreateBulkNotifications201,
  NotificationsDeleteNotification200,
  NotificationsGetNotificationAnalytics200,
  NotificationsGetNotificationTemplates200Item,
  NotificationsListResponseDto,
  NotificationsMarkAllAsRead200,
  NotificationsMarkAsRead200,
} from ".././model";

export const getNotificationsCreateNotificationResponseMock = (
  overrideResponse: Partial<NotificationResponseDto> = {},
): NotificationResponseDto => ({
  id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  userId: faker.string.alpha({ length: { min: 10, max: 20 } }),
  type: faker.helpers.arrayElement([
    "session_started",
    "session_completed",
    "session_cancelled",
    "session_reminder",
    "session_invitation",
    "message_received",
    "file_shared",
    "call_missed",
    "call_incoming",
    "mentee_assigned",
    "mentor_assigned",
    "report_generated",
    "system_update",
    "achievement_unlocked",
    "feedback_request",
    "resource_shared",
    "announcement",
    "reminder",
    "warning",
    "error",
  ] as const),
  title: faker.string.alpha({ length: { min: 10, max: 20 } }),
  message: faker.string.alpha({ length: { min: 10, max: 20 } }),
  data: faker.helpers.arrayElement([{}, undefined]),
  isRead: faker.datatype.boolean(),
  priority: faker.helpers.arrayElement([
    "low",
    "medium",
    "high",
    "urgent",
  ] as const),
  category: faker.helpers.arrayElement([
    "session",
    "message",
    "call",
    "system",
    "social",
    "educational",
    "administrative",
  ] as const),
  timestamp: `${faker.date.past().toISOString().split(".")[0]}Z`,
  expiresAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  actionUrl: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  imageUrl: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  createdBy: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  metadata: faker.helpers.arrayElement([{}, undefined]),
  ...overrideResponse,
});

export const getNotificationsCreateBulkNotificationsResponseMock = (
  overrideResponse: Partial<NotificationsCreateBulkNotifications201> = {},
): NotificationsCreateBulkNotifications201 => ({
  created: faker.helpers.arrayElement([
    faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    undefined,
  ]),
  skipped: faker.helpers.arrayElement([
    faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getNotificationsGetUserNotificationsResponseMock = (
  overrideResponse: Partial<NotificationsListResponseDto> = {},
): NotificationsListResponseDto => ({
  notifications: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.string.alpha({ length: { min: 10, max: 20 } }),
    userId: faker.string.alpha({ length: { min: 10, max: 20 } }),
    type: faker.helpers.arrayElement([
      "session_started",
      "session_completed",
      "session_cancelled",
      "session_reminder",
      "session_invitation",
      "message_received",
      "file_shared",
      "call_missed",
      "call_incoming",
      "mentee_assigned",
      "mentor_assigned",
      "report_generated",
      "system_update",
      "achievement_unlocked",
      "feedback_request",
      "resource_shared",
      "announcement",
      "reminder",
      "warning",
      "error",
    ] as const),
    title: faker.string.alpha({ length: { min: 10, max: 20 } }),
    message: faker.string.alpha({ length: { min: 10, max: 20 } }),
    data: faker.helpers.arrayElement([{}, undefined]),
    isRead: faker.datatype.boolean(),
    priority: faker.helpers.arrayElement([
      "low",
      "medium",
      "high",
      "urgent",
    ] as const),
    category: faker.helpers.arrayElement([
      "session",
      "message",
      "call",
      "system",
      "social",
      "educational",
      "administrative",
    ] as const),
    timestamp: `${faker.date.past().toISOString().split(".")[0]}Z`,
    expiresAt: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split(".")[0]}Z`,
      undefined,
    ]),
    actionUrl: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined,
    ]),
    imageUrl: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined,
    ]),
    createdBy: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined,
    ]),
    metadata: faker.helpers.arrayElement([{}, undefined]),
  })),
  total: faker.number.float({
    min: undefined,
    max: undefined,
    fractionDigits: 2,
  }),
  unreadCount: faker.number.float({
    min: undefined,
    max: undefined,
    fractionDigits: 2,
  }),
  page: faker.number.float({
    min: undefined,
    max: undefined,
    fractionDigits: 2,
  }),
  limit: faker.number.float({
    min: undefined,
    max: undefined,
    fractionDigits: 2,
  }),
  totalPages: faker.number.float({
    min: undefined,
    max: undefined,
    fractionDigits: 2,
  }),
  hasMore: faker.datatype.boolean(),
  ...overrideResponse,
});

export const getNotificationsMarkAsReadResponseMock = (
  overrideResponse: Partial<NotificationsMarkAsRead200> = {},
): NotificationsMarkAsRead200 => ({
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getNotificationsMarkAllAsReadResponseMock = (
  overrideResponse: Partial<NotificationsMarkAllAsRead200> = {},
): NotificationsMarkAllAsRead200 => ({
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  count: faker.helpers.arrayElement([
    faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getNotificationsDeleteNotificationResponseMock = (
  overrideResponse: Partial<NotificationsDeleteNotification200> = {},
): NotificationsDeleteNotification200 => ({
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getNotificationsClearAllNotificationsResponseMock = (
  overrideResponse: Partial<NotificationsClearAllNotifications200> = {},
): NotificationsClearAllNotifications200 => ({
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  count: faker.helpers.arrayElement([
    faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getNotificationsGetNotificationStatsResponseMock = (
  overrideResponse: Partial<NotificationStatsDto> = {},
): NotificationStatsDto => ({
  total: faker.number.float({
    min: undefined,
    max: undefined,
    fractionDigits: 2,
  }),
  unreadCount: faker.number.float({
    min: undefined,
    max: undefined,
    fractionDigits: 2,
  }),
  readCount: faker.number.float({
    min: undefined,
    max: undefined,
    fractionDigits: 2,
  }),
  byCategory: {},
  byPriority: {},
  byType: {},
  recentActivity: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    date: faker.helpers.arrayElement([
      faker.date.past().toISOString().split("T")[0],
      undefined,
    ]),
    count: faker.helpers.arrayElement([
      faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
      undefined,
    ]),
  })),
  ...overrideResponse,
});

export const getNotificationsGetNotificationPreferencesResponseMock = (
  overrideResponse: Partial<NotificationPreferencesResponseDto> = {},
): NotificationPreferencesResponseDto => ({
  userId: faker.string.alpha({ length: { min: 10, max: 20 } }),
  pushNotifications: faker.datatype.boolean(),
  emailNotifications: faker.datatype.boolean(),
  smsNotifications: faker.datatype.boolean(),
  categories: {},
  quietHours: {},
  frequency: {},
  updatedAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
  ...overrideResponse,
});

export const getNotificationsUpdateNotificationPreferencesResponseMock = (
  overrideResponse: Partial<NotificationPreferencesResponseDto> = {},
): NotificationPreferencesResponseDto => ({
  userId: faker.string.alpha({ length: { min: 10, max: 20 } }),
  pushNotifications: faker.datatype.boolean(),
  emailNotifications: faker.datatype.boolean(),
  smsNotifications: faker.datatype.boolean(),
  categories: {},
  quietHours: {},
  frequency: {},
  updatedAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
  ...overrideResponse,
});

export const getNotificationsGetNotificationAnalyticsResponseMock = (
  overrideResponse: Partial<NotificationsGetNotificationAnalytics200> = {},
): NotificationsGetNotificationAnalytics200 => ({
  totalNotifications: faker.helpers.arrayElement([
    faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    undefined,
  ]),
  deliveryRate: faker.helpers.arrayElement([
    faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    undefined,
  ]),
  readRate: faker.helpers.arrayElement([
    faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    undefined,
  ]),
  topCategories: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      category: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      count: faker.helpers.arrayElement([
        faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
        undefined,
      ]),
      percentage: faker.helpers.arrayElement([
        faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
        undefined,
      ]),
    })),
    undefined,
  ]),
  dailyTrends: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      date: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      sent: faker.helpers.arrayElement([
        faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
        undefined,
      ]),
      read: faker.helpers.arrayElement([
        faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
        undefined,
      ]),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getNotificationsGetNotificationTemplatesResponseMock =
  (): NotificationsGetNotificationTemplates200Item[] =>
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      id: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      name: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      category: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      type: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      title: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      message: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      priority: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      variables: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
        undefined,
      ]),
    }));

export const getNotificationsCreateNotificationMockHandler = (
  overrideResponse?:
    | NotificationResponseDto
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<NotificationResponseDto> | NotificationResponseDto),
) => {
  return http.post("*/api/notifications", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getNotificationsCreateNotificationResponseMock(),
      ),
      { status: 201, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getNotificationsCreateBulkNotificationsMockHandler = (
  overrideResponse?:
    | NotificationsCreateBulkNotifications201
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) =>
        | Promise<NotificationsCreateBulkNotifications201>
        | NotificationsCreateBulkNotifications201),
) => {
  return http.post("*/api/notifications/bulk", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getNotificationsCreateBulkNotificationsResponseMock(),
      ),
      { status: 201, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getNotificationsGetUserNotificationsMockHandler = (
  overrideResponse?:
    | NotificationsListResponseDto
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<NotificationsListResponseDto>
        | NotificationsListResponseDto),
) => {
  return http.get("*/api/notifications/users/:userId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getNotificationsGetUserNotificationsResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getNotificationsMarkAsReadMockHandler = (
  overrideResponse?:
    | NotificationsMarkAsRead200
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<NotificationsMarkAsRead200> | NotificationsMarkAsRead200),
) => {
  return http.put(
    "*/api/notifications/users/:userId/:notificationId/read",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getNotificationsMarkAsReadResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
  );
};

export const getNotificationsMarkAllAsReadMockHandler = (
  overrideResponse?:
    | NotificationsMarkAllAsRead200
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) =>
        | Promise<NotificationsMarkAllAsRead200>
        | NotificationsMarkAllAsRead200),
) => {
  return http.put(
    "*/api/notifications/users/:userId/read-all",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getNotificationsMarkAllAsReadResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
  );
};

export const getNotificationsDeleteNotificationMockHandler = (
  overrideResponse?:
    | NotificationsDeleteNotification200
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) =>
        | Promise<NotificationsDeleteNotification200>
        | NotificationsDeleteNotification200),
) => {
  return http.delete(
    "*/api/notifications/users/:userId/:notificationId",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getNotificationsDeleteNotificationResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
  );
};

export const getNotificationsClearAllNotificationsMockHandler = (
  overrideResponse?:
    | NotificationsClearAllNotifications200
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) =>
        | Promise<NotificationsClearAllNotifications200>
        | NotificationsClearAllNotifications200),
) => {
  return http.delete(
    "*/api/notifications/users/:userId/clear-all",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getNotificationsClearAllNotificationsResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
  );
};

export const getNotificationsGetNotificationStatsMockHandler = (
  overrideResponse?:
    | NotificationStatsDto
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<NotificationStatsDto> | NotificationStatsDto),
) => {
  return http.get("*/api/notifications/users/:userId/stats", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getNotificationsGetNotificationStatsResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getNotificationsGetNotificationPreferencesMockHandler = (
  overrideResponse?:
    | NotificationPreferencesResponseDto
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<NotificationPreferencesResponseDto>
        | NotificationPreferencesResponseDto),
) => {
  return http.get(
    "*/api/notifications/users/:userId/preferences",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getNotificationsGetNotificationPreferencesResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
  );
};

export const getNotificationsUpdateNotificationPreferencesMockHandler = (
  overrideResponse?:
    | NotificationPreferencesResponseDto
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) =>
        | Promise<NotificationPreferencesResponseDto>
        | NotificationPreferencesResponseDto),
) => {
  return http.put(
    "*/api/notifications/users/:userId/preferences",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getNotificationsUpdateNotificationPreferencesResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
  );
};

export const getNotificationsNotifySessionStartedMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.post("*/api/notifications/session/started", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 201 });
  });
};

export const getNotificationsNotifyNewMessageMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.post("*/api/notifications/message/received", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 201 });
  });
};

export const getNotificationsNotifyIncomingCallMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.post("*/api/notifications/call/incoming", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 201 });
  });
};

export const getNotificationsNotifyMenteeAssignedMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.post("*/api/notifications/assignment/mentee", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 201 });
  });
};

export const getNotificationsNotifyReportGeneratedMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.post("*/api/notifications/report/generated", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 201 });
  });
};

export const getNotificationsSendSystemAnnouncementMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.post("*/api/notifications/system/announcement", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 201 });
  });
};

export const getNotificationsGetNotificationAnalyticsMockHandler = (
  overrideResponse?:
    | NotificationsGetNotificationAnalytics200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<NotificationsGetNotificationAnalytics200>
        | NotificationsGetNotificationAnalytics200),
) => {
  return http.get("*/api/notifications/analytics/overview", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getNotificationsGetNotificationAnalyticsResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getNotificationsGetNotificationTemplatesMockHandler = (
  overrideResponse?:
    | NotificationsGetNotificationTemplates200Item[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<NotificationsGetNotificationTemplates200Item[]>
        | NotificationsGetNotificationTemplates200Item[]),
) => {
  return http.get("*/api/notifications/templates", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getNotificationsGetNotificationTemplatesResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};
export const getNotificationsMock = () => [
  getNotificationsCreateNotificationMockHandler(),
  getNotificationsCreateBulkNotificationsMockHandler(),
  getNotificationsGetUserNotificationsMockHandler(),
  getNotificationsMarkAsReadMockHandler(),
  getNotificationsMarkAllAsReadMockHandler(),
  getNotificationsDeleteNotificationMockHandler(),
  getNotificationsClearAllNotificationsMockHandler(),
  getNotificationsGetNotificationStatsMockHandler(),
  getNotificationsGetNotificationPreferencesMockHandler(),
  getNotificationsUpdateNotificationPreferencesMockHandler(),
  getNotificationsNotifySessionStartedMockHandler(),
  getNotificationsNotifyNewMessageMockHandler(),
  getNotificationsNotifyIncomingCallMockHandler(),
  getNotificationsNotifyMenteeAssignedMockHandler(),
  getNotificationsNotifyReportGeneratedMockHandler(),
  getNotificationsSendSystemAnnouncementMockHandler(),
  getNotificationsGetNotificationAnalyticsMockHandler(),
  getNotificationsGetNotificationTemplatesMockHandler(),
];

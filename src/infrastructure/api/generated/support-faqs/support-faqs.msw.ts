/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * MME API Documentation
 * 
      API documentation for Meu Mentor Eiffel system
      
      ## Authentication
      This API uses Firebase Authentication with Bearer tokens.
      
      ## Base URL
      - Development: http://localhost:3000/api
      - Production: https://your-domain.com/api
      
      ## Rate Limiting
      - 100 requests per 15 minutes per IP
      - Additional limits may apply to specific endpoints
      
      ## Error Handling
      All endpoints return consistent error responses with proper HTTP status codes.
    
 * OpenAPI spec version: 1.0.0
 */
import { HttpResponse, delay, http } from "msw";

import type { FAQResponseDto, FAQsListResponseDto } from ".././model";

export const getFAQsCreateFAQResponseMock = (
  overrideResponse: Partial<FAQResponseDto> = {},
): FAQResponseDto => ({ ...overrideResponse });

export const getFAQsGetFAQsResponseMock = (
  overrideResponse: Partial<FAQsListResponseDto> = {},
): FAQsListResponseDto => ({ ...overrideResponse });

export const getFAQsGetFAQByIdResponseMock = (
  overrideResponse: Partial<FAQResponseDto> = {},
): FAQResponseDto => ({ ...overrideResponse });

export const getFAQsUpdateFAQResponseMock = (
  overrideResponse: Partial<FAQResponseDto> = {},
): FAQResponseDto => ({ ...overrideResponse });

export const getFAQsCreateFAQMockHandler = (
  overrideResponse?:
    | FAQResponseDto
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<FAQResponseDto> | FAQResponseDto),
) => {
  return http.post("*/api/support/faqs", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getFAQsCreateFAQResponseMock(),
      ),
      { status: 201, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getFAQsGetFAQsMockHandler = (
  overrideResponse?:
    | FAQsListResponseDto
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<FAQsListResponseDto> | FAQsListResponseDto),
) => {
  return http.get("*/api/support/faqs", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getFAQsGetFAQsResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getFAQsGetFAQByIdMockHandler = (
  overrideResponse?:
    | FAQResponseDto
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<FAQResponseDto> | FAQResponseDto),
) => {
  return http.get("*/api/support/faqs/:faqId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getFAQsGetFAQByIdResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getFAQsUpdateFAQMockHandler = (
  overrideResponse?:
    | FAQResponseDto
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<FAQResponseDto> | FAQResponseDto),
) => {
  return http.put("*/api/support/faqs/:faqId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getFAQsUpdateFAQResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getFAQsDeleteFAQMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.delete("*/api/support/faqs/:faqId", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getFAQsVoteFAQMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.post("*/api/support/faqs/:faqId/vote", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};
export const getSupportFaqsMock = () => [
  getFAQsCreateFAQMockHandler(),
  getFAQsGetFAQsMockHandler(),
  getFAQsGetFAQByIdMockHandler(),
  getFAQsUpdateFAQMockHandler(),
  getFAQsDeleteFAQMockHandler(),
  getFAQsVoteFAQMockHandler(),
];

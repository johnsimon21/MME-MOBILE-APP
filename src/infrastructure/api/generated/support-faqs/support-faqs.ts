/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * MME API Documentation
 * 
      API documentation for Meu Mentor Eiffel system
      
      ## Authentication
      This API uses Firebase Authentication with Bearer tokens.
      
      ## Base URL
      - Development: http://localhost:3000/api
      - Production: https://your-domain.com/api
      
      ## Rate Limiting
      - 100 requests per 15 minutes per IP
      - Additional limits may apply to specific endpoints
      
      ## Error Handling
      All endpoints return consistent error responses with proper HTTP status codes.
    
 * OpenAPI spec version: 1.0.0
 */
import type {
  CreateFAQDto,
  FAQResponseDto,
  FAQsListResponseDto,
  UpdateFAQDto,
  VoteFAQDto,
} from ".././model";

import { customInstance } from "../../custom-instance";

export const getSupportFaqs = () => {
  /**
   * Criar uma nova FAQ. Apenas coordenadores e mentores podem criar FAQs.
   * @summary Criar FAQ
   */
  const fAQsCreateFAQ = (createFAQDto: CreateFAQDto) => {
    return customInstance<FAQResponseDto>({
      url: `/api/support/faqs`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createFAQDto,
    });
  };
  /**
   * Listar todas as FAQs. Endpoint público.
   * @summary Listar FAQs
   */
  const fAQsGetFAQs = () => {
    return customInstance<FAQsListResponseDto>({
      url: `/api/support/faqs`,
      method: "GET",
    });
  };
  /**
   * Obter uma FAQ específica pelo ID. Endpoint público.
   * @summary Obter FAQ por ID
   */
  const fAQsGetFAQById = (faqId: string) => {
    return customInstance<FAQResponseDto>({
      url: `/api/support/faqs/${faqId}`,
      method: "GET",
    });
  };
  /**
   * Atualizar uma FAQ específica pelo ID. Apenas o criador ou coordenadores podem atualizar.
   * @summary Atualizar FAQ por ID
   */
  const fAQsUpdateFAQ = (faqId: string, updateFAQDto: UpdateFAQDto) => {
    return customInstance<FAQResponseDto>({
      url: `/api/support/faqs/${faqId}`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: updateFAQDto,
    });
  };
  /**
   * Excluir uma FAQ específica pelo ID. Apenas o criador ou coordenadores podem excluir.
   * @summary Excluir FAQ por ID
   */
  const fAQsDeleteFAQ = (faqId: string) => {
    return customInstance<void>({
      url: `/api/support/faqs/${faqId}`,
      method: "DELETE",
    });
  };
  /**
   * Votar em uma FAQ específica. Usuários autenticados podem votar.
   * @summary Votar em uma FAQ
   */
  const fAQsVoteFAQ = (faqId: string, voteFAQDto: VoteFAQDto) => {
    return customInstance<void>({
      url: `/api/support/faqs/${faqId}/vote`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: voteFAQDto,
    });
  };
  return {
    fAQsCreateFAQ,
    fAQsGetFAQs,
    fAQsGetFAQById,
    fAQsUpdateFAQ,
    fAQsDeleteFAQ,
    fAQsVoteFAQ,
  };
};
export type FAQsCreateFAQResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSupportFaqs>["fAQsCreateFAQ"]>>
>;
export type FAQsGetFAQsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSupportFaqs>["fAQsGetFAQs"]>>
>;
export type FAQsGetFAQByIdResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSupportFaqs>["fAQsGetFAQById"]>>
>;
export type FAQsUpdateFAQResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSupportFaqs>["fAQsUpdateFAQ"]>>
>;
export type FAQsDeleteFAQResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSupportFaqs>["fAQsDeleteFAQ"]>>
>;
export type FAQsVoteFAQResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSupportFaqs>["fAQsVoteFAQ"]>>
>;

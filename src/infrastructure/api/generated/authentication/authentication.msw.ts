/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * MME API Documentation
 * 
      API documentation for Meu Mentor Eiffel system
      
      ## Authentication
      This API uses Firebase Authentication with Bearer tokens.
      
      ## Base URL
      - Development: http://localhost:3000/api
      - Production: https://your-domain.com/api
      
      ## Rate Limiting
      - 100 requests per 15 minutes per IP
      - Additional limits may apply to specific endpoints
      
      ## Error Handling
      All endpoints return consistent error responses with proper HTTP status codes.
    
 * OpenAPI spec version: 1.0.0
 */
import { faker } from "@faker-js/faker";

import { HttpResponse, delay, http } from "msw";

import type {
  ForgotPasswordResponseDto,
  LoginResponseDto,
  RegisterResponseDto,
  ResetPasswordResponseDto,
  TokenVerificationResponseDto,
} from ".././model";

export const getAuthRegisterResponseMock = (
  overrideResponse: Partial<RegisterResponseDto> = {},
): RegisterResponseDto => ({
  uid: faker.string.alpha({ length: { min: 10, max: 20 } }),
  email: faker.string.alpha({ length: { min: 10, max: 20 } }),
  fullName: faker.string.alpha({ length: { min: 10, max: 20 } }),
  role: faker.string.alpha({ length: { min: 10, max: 20 } }),
  message: faker.string.alpha({ length: { min: 10, max: 20 } }),
  ...overrideResponse,
});

export const getAuthLoginResponseMock = (
  overrideResponse: Partial<LoginResponseDto> = {},
): LoginResponseDto => ({
  uid: faker.string.alpha({ length: { min: 10, max: 20 } }),
  email: faker.string.alpha({ length: { min: 10, max: 20 } }),
  fullName: faker.string.alpha({ length: { min: 10, max: 20 } }),
  role: faker.helpers.arrayElement([
    "mentor",
    "mentee",
    "coordinator",
  ] as const),
  school: faker.string.alpha({ length: { min: 10, max: 20 } }),
  customToken: faker.string.alpha({ length: { min: 10, max: 20 } }),
  message: faker.string.alpha({ length: { min: 10, max: 20 } }),
  ...overrideResponse,
});

export const getAuthForgotPasswordResponseMock = (
  overrideResponse: Partial<ForgotPasswordResponseDto> = {},
): ForgotPasswordResponseDto => ({
  message: faker.string.alpha({ length: { min: 10, max: 20 } }),
  ...overrideResponse,
});

export const getAuthResetPasswordResponseMock = (
  overrideResponse: Partial<ResetPasswordResponseDto> = {},
): ResetPasswordResponseDto => ({
  message: faker.string.alpha({ length: { min: 10, max: 20 } }),
  ...overrideResponse,
});

export const getAuthVerifyTokenResponseMock = (
  overrideResponse: Partial<TokenVerificationResponseDto> = {},
): TokenVerificationResponseDto => ({
  valid: faker.datatype.boolean(),
  uid: faker.string.alpha({ length: { min: 10, max: 20 } }),
  email: faker.string.alpha({ length: { min: 10, max: 20 } }),
  ...overrideResponse,
});

export const getAuthRegisterMockHandler = (
  overrideResponse?:
    | RegisterResponseDto
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<RegisterResponseDto> | RegisterResponseDto),
) => {
  return http.post("*/api/auth/register", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getAuthRegisterResponseMock(),
      ),
      { status: 201, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getAuthLoginMockHandler = (
  overrideResponse?:
    | LoginResponseDto
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<LoginResponseDto> | LoginResponseDto),
) => {
  return http.post("*/api/auth/login", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getAuthLoginResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getAuthForgotPasswordMockHandler = (
  overrideResponse?:
    | ForgotPasswordResponseDto
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<ForgotPasswordResponseDto> | ForgotPasswordResponseDto),
) => {
  return http.post("*/api/auth/forgot-password", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getAuthForgotPasswordResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getAuthResetPasswordMockHandler = (
  overrideResponse?:
    | ResetPasswordResponseDto
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<ResetPasswordResponseDto> | ResetPasswordResponseDto),
) => {
  return http.post("*/api/auth/reset-password", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getAuthResetPasswordResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getAuthValidateResetTokenMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.get("*/api/auth/validate-reset-token", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getAuthVerifyTokenMockHandler = (
  overrideResponse?:
    | TokenVerificationResponseDto
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) =>
        | Promise<TokenVerificationResponseDto>
        | TokenVerificationResponseDto),
) => {
  return http.post("*/api/auth/verify-token", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getAuthVerifyTokenResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getAuthGetUserProfileMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.get("*/api/auth/profile/:uid", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getAuthGetCurrentUserProfileMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.get("*/api/auth/me", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};
export const getAuthenticationMock = () => [
  getAuthRegisterMockHandler(),
  getAuthLoginMockHandler(),
  getAuthForgotPasswordMockHandler(),
  getAuthResetPasswordMockHandler(),
  getAuthValidateResetTokenMockHandler(),
  getAuthVerifyTokenMockHandler(),
  getAuthGetUserProfileMockHandler(),
  getAuthGetCurrentUserProfileMockHandler(),
];

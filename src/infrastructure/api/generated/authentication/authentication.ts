/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * MME API Documentation
 * 
      API documentation for Meu Mentor Eiffel system
      
      ## Authentication
      This API uses Firebase Authentication with Bearer tokens.
      
      ## Base URL
      - Development: http://localhost:3000/api
      - Production: https://your-domain.com/api
      
      ## Rate Limiting
      - 100 requests per 15 minutes per IP
      - Additional limits may apply to specific endpoints
      
      ## Error Handling
      All endpoints return consistent error responses with proper HTTP status codes.
    
 * OpenAPI spec version: 1.0.0
 */
import type {
  AuthResetPasswordParams,
  AuthValidateResetTokenParams,
  ForgotPasswordDto,
  ForgotPasswordResponseDto,
  LoginDto,
  LoginResponseDto,
  RegisterDto,
  RegisterResponseDto,
  ResetPasswordDto,
  ResetPasswordResponseDto,
  TokenVerificationResponseDto,
} from ".././model";

import { customInstance } from "../../custom-instance";

export const getAuthentication = () => {
  /**
   * Create a new user account with role-specific information
   * @summary Register new user
   */
  const authRegister = (registerDto: RegisterDto) => {
    return customInstance<RegisterResponseDto>({
      url: `/api/auth/register`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: registerDto,
    });
  };
  /**
   * Authenticate user and return JWT token
   * @summary User login
   */
  const authLogin = (loginDto: LoginDto) => {
    return customInstance<LoginResponseDto>({
      url: `/api/auth/login`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: loginDto,
    });
  };
  /**
   * Send password reset email to user
   * @summary Request password reset
   */
  const authForgotPassword = (forgotPasswordDto: ForgotPasswordDto) => {
    return customInstance<ForgotPasswordResponseDto>({
      url: `/api/auth/forgot-password`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: forgotPasswordDto,
    });
  };
  /**
   * Reset user password using the token from email
   * @summary Reset password with token
   */
  const authResetPassword = (
    resetPasswordDto: ResetPasswordDto,
    params: AuthResetPasswordParams,
  ) => {
    return customInstance<ResetPasswordResponseDto>({
      url: `/api/auth/reset-password`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: resetPasswordDto,
      params,
    });
  };
  /**
   * @summary Validate reset token
   */
  const authValidateResetToken = (params: AuthValidateResetTokenParams) => {
    return customInstance<void>({
      url: `/api/auth/validate-reset-token`,
      method: "GET",
      params,
    });
  };
  /**
   * @summary Verify JWT token
   */
  const authVerifyToken = () => {
    return customInstance<TokenVerificationResponseDto>({
      url: `/api/auth/verify-token`,
      method: "POST",
    });
  };
  /**
   * @summary Get user profile
   */
  const authGetUserProfile = (uid: string) => {
    return customInstance<void>({
      url: `/api/auth/profile/${uid}`,
      method: "GET",
    });
  };
  /**
   * Get the profile of the currently authenticated user
   * @summary Get current user profile
   */
  const authGetCurrentUserProfile = () => {
    return customInstance<void>({ url: `/api/auth/me`, method: "GET" });
  };
  return {
    authRegister,
    authLogin,
    authForgotPassword,
    authResetPassword,
    authValidateResetToken,
    authVerifyToken,
    authGetUserProfile,
    authGetCurrentUserProfile,
  };
};
export type AuthRegisterResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getAuthentication>["authRegister"]>>
>;
export type AuthLoginResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getAuthentication>["authLogin"]>>
>;
export type AuthForgotPasswordResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getAuthentication>["authForgotPassword"]>
  >
>;
export type AuthResetPasswordResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getAuthentication>["authResetPassword"]>>
>;
export type AuthValidateResetTokenResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getAuthentication>["authValidateResetToken"]>
  >
>;
export type AuthVerifyTokenResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getAuthentication>["authVerifyToken"]>>
>;
export type AuthGetUserProfileResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getAuthentication>["authGetUserProfile"]>
  >
>;
export type AuthGetCurrentUserProfileResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getAuthentication>["authGetCurrentUserProfile"]
    >
  >
>;

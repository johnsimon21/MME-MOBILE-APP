/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * MME API Documentation
 * 
      API documentation for Meu Mentor Eiffel system
      
      ## Authentication
      This API uses Firebase Authentication with Bearer tokens.
      
      ## Base URL
      - Development: http://localhost:3000/api
      - Production: https://your-domain.com/api
      
      ## Rate Limiting
      - 100 requests per 15 minutes per IP
      - Additional limits may apply to specific endpoints
      
      ## Error Handling
      All endpoints return consistent error responses with proper HTTP status codes.
    
 * OpenAPI spec version: 1.0.0
 */
import { HttpResponse, delay, http } from "msw";

import type {
  ChatSessionsListResponseDto,
  SupportChatMessageResponseDto,
  SupportChatSessionResponseDto,
} from ".././model";

export const getSupportChatStartChatSessionResponseMock = (
  overrideResponse: Partial<SupportChatSessionResponseDto> = {},
): SupportChatSessionResponseDto => ({ ...overrideResponse });

export const getSupportChatGetChatSessionsResponseMock = (
  overrideResponse: Partial<ChatSessionsListResponseDto> = {},
): ChatSessionsListResponseDto => ({ ...overrideResponse });

export const getSupportChatGetChatSessionResponseMock = (
  overrideResponse: Partial<SupportChatSessionResponseDto> = {},
): SupportChatSessionResponseDto => ({ ...overrideResponse });

export const getSupportChatSendMessageResponseMock = (
  overrideResponse: Partial<SupportChatMessageResponseDto> = {},
): SupportChatMessageResponseDto => ({ ...overrideResponse });

export const getSupportChatCloseChatSessionResponseMock = (
  overrideResponse: Partial<SupportChatSessionResponseDto> = {},
): SupportChatSessionResponseDto => ({ ...overrideResponse });

export const getSupportChatAssignChatSessionResponseMock = (
  overrideResponse: Partial<SupportChatSessionResponseDto> = {},
): SupportChatSessionResponseDto => ({ ...overrideResponse });

export const getSupportChatStartChatSessionMockHandler = (
  overrideResponse?:
    | SupportChatSessionResponseDto
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) =>
        | Promise<SupportChatSessionResponseDto>
        | SupportChatSessionResponseDto),
) => {
  return http.post("*/api/support/chat/sessions", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getSupportChatStartChatSessionResponseMock(),
      ),
      { status: 201, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getSupportChatGetChatSessionsMockHandler = (
  overrideResponse?:
    | ChatSessionsListResponseDto
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<ChatSessionsListResponseDto> | ChatSessionsListResponseDto),
) => {
  return http.get("*/api/support/chat/sessions", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getSupportChatGetChatSessionsResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getSupportChatGetChatSessionMockHandler = (
  overrideResponse?:
    | SupportChatSessionResponseDto
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<SupportChatSessionResponseDto>
        | SupportChatSessionResponseDto),
) => {
  return http.get("*/api/support/chat/sessions/:sessionId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getSupportChatGetChatSessionResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getSupportChatSendMessageMockHandler = (
  overrideResponse?:
    | SupportChatMessageResponseDto
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) =>
        | Promise<SupportChatMessageResponseDto>
        | SupportChatMessageResponseDto),
) => {
  return http.post(
    "*/api/support/chat/sessions/:sessionId/messages",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getSupportChatSendMessageResponseMock(),
        ),
        { status: 201, headers: { "Content-Type": "application/json" } },
      );
    },
  );
};

export const getSupportChatGetChatMessagesMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.get(
    "*/api/support/chat/sessions/:sessionId/messages",
    async (info) => {
      await delay(1000);
      if (typeof overrideResponse === "function") {
        await overrideResponse(info);
      }
      return new HttpResponse(null, { status: 200 });
    },
  );
};

export const getSupportChatCloseChatSessionMockHandler = (
  overrideResponse?:
    | SupportChatSessionResponseDto
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) =>
        | Promise<SupportChatSessionResponseDto>
        | SupportChatSessionResponseDto),
) => {
  return http.put(
    "*/api/support/chat/sessions/:sessionId/close",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getSupportChatCloseChatSessionResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
  );
};

export const getSupportChatAssignChatSessionMockHandler = (
  overrideResponse?:
    | SupportChatSessionResponseDto
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) =>
        | Promise<SupportChatSessionResponseDto>
        | SupportChatSessionResponseDto),
) => {
  return http.put(
    "*/api/support/chat/sessions/:sessionId/assign",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getSupportChatAssignChatSessionResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
  );
};
export const getSupportChatMock = () => [
  getSupportChatStartChatSessionMockHandler(),
  getSupportChatGetChatSessionsMockHandler(),
  getSupportChatGetChatSessionMockHandler(),
  getSupportChatSendMessageMockHandler(),
  getSupportChatGetChatMessagesMockHandler(),
  getSupportChatCloseChatSessionMockHandler(),
  getSupportChatAssignChatSessionMockHandler(),
];

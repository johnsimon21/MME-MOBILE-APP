/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * MME API Documentation
 * 
      API documentation for Meu Mentor Eiffel system
      
      ## Authentication
      This API uses Firebase Authentication with Bearer tokens.
      
      ## Base URL
      - Development: http://localhost:3000/api
      - Production: https://your-domain.com/api
      
      ## Rate Limiting
      - 100 requests per 15 minutes per IP
      - Additional limits may apply to specific endpoints
      
      ## Error Handling
      All endpoints return consistent error responses with proper HTTP status codes.
    
 * OpenAPI spec version: 1.0.0
 */
import type {
  ChatSessionsListResponseDto,
  CloseChatSessionDto,
  SendChatMessageDto,
  StartChatSessionDto,
  SupportChatAssignChatSessionBody,
  SupportChatGetChatMessagesParams,
  SupportChatGetChatSessionsParams,
  SupportChatMessageResponseDto,
  SupportChatSessionResponseDto,
} from ".././model";

import { customInstance } from "../../custom-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getSupportChat = () => {
  /**
   * Iniciar uma nova sess√£o de chat de suporte. Usu√°rios autenticados podem iniciar sess√µes.
   * @summary Start a new chat session
   */
  const supportChatStartChatSession = (
    startChatSessionDto: StartChatSessionDto,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<SupportChatSessionResponseDto>(
      {
        url: `/api/support/chat/sessions`,
        method: "POST",
        headers: { "Content-Type": "application/json" },
        data: startChatSessionDto,
      },
      options,
    );
  };
  /**
   * Obter sess√µes de chat do usu√°rio. Usu√°rios veem suas pr√≥prias sess√µes, coordenadores veem todas.
   * @summary Get user chat sessions
   */
  const supportChatGetChatSessions = (
    params?: SupportChatGetChatSessionsParams,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<ChatSessionsListResponseDto>(
      { url: `/api/support/chat/sessions`, method: "GET", params },
      options,
    );
  };
  /**
   * Obter detalhes de uma sess√£o de chat espec√≠fica. Usu√°rios podem ver apenas suas pr√≥prias sess√µes.
   * @summary Get chat session details
   */
  const supportChatGetChatSession = (
    sessionId: string,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<SupportChatSessionResponseDto>(
      { url: `/api/support/chat/sessions/${sessionId}`, method: "GET" },
      options,
    );
  };
  /**
   * Enviar mensagem em uma sess√£o de chat. Apenas participantes da sess√£o podem enviar mensagens.
   * @summary Send message in chat session
   */
  const supportChatSendMessage = (
    sessionId: string,
    sendChatMessageDto: SendChatMessageDto,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<SupportChatMessageResponseDto>(
      {
        url: `/api/support/chat/sessions/${sessionId}/messages`,
        method: "POST",
        headers: { "Content-Type": "application/json" },
        data: sendChatMessageDto,
      },
      options,
    );
  };
  /**
   * Obter mensagens de uma sess√£o de chat. Apenas participantes podem ver as mensagens.
   * @summary Get chat session messages
   */
  const supportChatGetChatMessages = (
    sessionId: string,
    params?: SupportChatGetChatMessagesParams,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<void>(
      {
        url: `/api/support/chat/sessions/${sessionId}/messages`,
        method: "GET",
        params,
      },
      options,
    );
  };
  /**
   * Fechar uma sess√£o de chat. Usu√°rios podem fechar suas pr√≥prias sess√µes, coordenadores podem fechar qualquer sess√£o.
   * @summary Close chat session
   */
  const supportChatCloseChatSession = (
    sessionId: string,
    closeChatSessionDto: CloseChatSessionDto,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<SupportChatSessionResponseDto>(
      {
        url: `/api/support/chat/sessions/${sessionId}/close`,
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        data: closeChatSessionDto,
      },
      options,
    );
  };
  /**
   * Atribuir sess√£o de chat a um agente. Apenas coordenadores podem atribuir sess√µes.
   * @summary Assign chat session to agent
   */
  const supportChatAssignChatSession = (
    sessionId: string,
    supportChatAssignChatSessionBody: SupportChatAssignChatSessionBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<SupportChatSessionResponseDto>(
      {
        url: `/api/support/chat/sessions/${sessionId}/assign`,
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        data: supportChatAssignChatSessionBody,
      },
      options,
    );
  };
  return {
    supportChatStartChatSession,
    supportChatGetChatSessions,
    supportChatGetChatSession,
    supportChatSendMessage,
    supportChatGetChatMessages,
    supportChatCloseChatSession,
    supportChatAssignChatSession,
  };
};
export type SupportChatStartChatSessionResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getSupportChat>["supportChatStartChatSession"]>
  >
>;
export type SupportChatGetChatSessionsResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getSupportChat>["supportChatGetChatSessions"]>
  >
>;
export type SupportChatGetChatSessionResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getSupportChat>["supportChatGetChatSession"]>
  >
>;
export type SupportChatSendMessageResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getSupportChat>["supportChatSendMessage"]>
  >
>;
export type SupportChatGetChatMessagesResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getSupportChat>["supportChatGetChatMessages"]>
  >
>;
export type SupportChatCloseChatSessionResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getSupportChat>["supportChatCloseChatSession"]>
  >
>;
export type SupportChatAssignChatSessionResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getSupportChat>["supportChatAssignChatSession"]
    >
  >
>;

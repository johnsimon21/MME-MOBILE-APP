/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * MME API Documentation
 * 
      API documentation for Meu Mentor Eiffel system
      
      ## Authentication
      This API uses Firebase Authentication with Bearer tokens.
      
      ## Base URL
      - Development: http://localhost:3000/api
      - Production: https://your-domain.com/api
      
      ## Rate Limiting
      - 100 requests per 15 minutes per IP
      - Additional limits may apply to specific endpoints
      
      ## Error Handling
      All endpoints return consistent error responses with proper HTTP status codes.
    
 * OpenAPI spec version: 1.0.0
 */
import { HttpResponse, delay, http } from "msw";

import type {
  TicketDetailsResponseDto,
  TicketResponseDto,
  TicketsListResponseDto,
} from ".././model";

export const getTicketsCreateTicketResponseMock = (
  overrideResponse: Partial<TicketResponseDto> = {},
): TicketResponseDto => ({ ...overrideResponse });

export const getTicketsGetTicketsResponseMock = (
  overrideResponse: Partial<TicketsListResponseDto> = {},
): TicketsListResponseDto => ({ ...overrideResponse });

export const getTicketsGetTicketByIdResponseMock = (
  overrideResponse: Partial<TicketDetailsResponseDto> = {},
): TicketDetailsResponseDto => ({ ...overrideResponse });

export const getTicketsUpdateTicketResponseMock = (
  overrideResponse: Partial<TicketResponseDto> = {},
): TicketResponseDto => ({ ...overrideResponse });

export const getTicketsUpdateTicketStatusResponseMock = (
  overrideResponse: Partial<TicketResponseDto> = {},
): TicketResponseDto => ({ ...overrideResponse });

export const getTicketsAssignTicketResponseMock = (
  overrideResponse: Partial<TicketResponseDto> = {},
): TicketResponseDto => ({ ...overrideResponse });

export const getTicketsCreateTicketMockHandler = (
  overrideResponse?:
    | TicketResponseDto
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<TicketResponseDto> | TicketResponseDto),
) => {
  return http.post("*/api/support/tickets", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getTicketsCreateTicketResponseMock(),
      ),
      { status: 201, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getTicketsGetTicketsMockHandler = (
  overrideResponse?:
    | TicketsListResponseDto
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<TicketsListResponseDto> | TicketsListResponseDto),
) => {
  return http.get("*/api/support/tickets", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getTicketsGetTicketsResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getTicketsGetTicketByIdMockHandler = (
  overrideResponse?:
    | TicketDetailsResponseDto
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<TicketDetailsResponseDto> | TicketDetailsResponseDto),
) => {
  return http.get("*/api/support/tickets/:ticketId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getTicketsGetTicketByIdResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getTicketsUpdateTicketMockHandler = (
  overrideResponse?:
    | TicketResponseDto
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<TicketResponseDto> | TicketResponseDto),
) => {
  return http.put("*/api/support/tickets/:ticketId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getTicketsUpdateTicketResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getTicketsUpdateTicketStatusMockHandler = (
  overrideResponse?:
    | TicketResponseDto
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<TicketResponseDto> | TicketResponseDto),
) => {
  return http.put("*/api/support/tickets/:ticketId/status", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getTicketsUpdateTicketStatusResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getTicketsAddMessageMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.post("*/api/support/tickets/:ticketId/messages", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 201 });
  });
};

export const getTicketsAssignTicketMockHandler = (
  overrideResponse?:
    | TicketResponseDto
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<TicketResponseDto> | TicketResponseDto),
) => {
  return http.put("*/api/support/tickets/:ticketId/assign", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getTicketsAssignTicketResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};
export const getSupportTicketsMock = () => [
  getTicketsCreateTicketMockHandler(),
  getTicketsGetTicketsMockHandler(),
  getTicketsGetTicketByIdMockHandler(),
  getTicketsUpdateTicketMockHandler(),
  getTicketsUpdateTicketStatusMockHandler(),
  getTicketsAddMessageMockHandler(),
  getTicketsAssignTicketMockHandler(),
];

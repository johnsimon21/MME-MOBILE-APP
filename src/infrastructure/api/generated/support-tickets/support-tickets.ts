/**
 * Generated by orval v7.10.0 游꽄
 * Do not edit manually.
 * MME API Documentation
 * 
      API documentation for Meu Mentor Eiffel system
      
      ## Authentication
      This API uses Firebase Authentication with Bearer tokens.
      
      ## Base URL
      - Development: http://localhost:3000/api
      - Production: https://your-domain.com/api
      
      ## Rate Limiting
      - 100 requests per 15 minutes per IP
      - Additional limits may apply to specific endpoints
      
      ## Error Handling
      All endpoints return consistent error responses with proper HTTP status codes.
    
 * OpenAPI spec version: 1.0.0
 */
import type {
  AddTicketMessageDto,
  CreateTicketDto,
  TicketDetailsResponseDto,
  TicketResponseDto,
  TicketsAssignTicketBody,
  TicketsGetTicketsParams,
  TicketsListResponseDto,
  TicketsUpdateTicketStatusBody,
  UpdateTicketDto,
} from ".././model";

import { customInstance } from "../../custom-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getSupportTickets = () => {
  /**
   * Criar um ticket de suporte. Usu치rios autenticados podem criar tickets.
   * @summary Create support ticket
   */
  const ticketsCreateTicket = (
    createTicketDto: CreateTicketDto,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    const formData = new FormData();
    formData.append(`title`, createTicketDto.title);
    formData.append(`description`, createTicketDto.description);
    formData.append(`category`, createTicketDto.category);
    formData.append(`priority`, createTicketDto.priority);
    if (createTicketDto.attachment !== undefined) {
      formData.append(`attachment`, createTicketDto.attachment);
    }

    return customInstance<TicketResponseDto>(
      {
        url: `/api/support/tickets`,
        method: "POST",
        headers: { "Content-Type": "multipart/form-data" },
        data: formData,
      },
      options,
    );
  };
  /**
   * Obter tickets. Usu치rios veem seus pr칩prios tickets, coordenadores veem todos.
   * @summary Get tickets
   */
  const ticketsGetTickets = (
    params?: TicketsGetTicketsParams,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<TicketsListResponseDto>(
      { url: `/api/support/tickets`, method: "GET", params },
      options,
    );
  };
  /**
   * Obter detalhes de um ticket espec칤fico. Usu치rios podem ver apenas seus pr칩prios tickets.
   * @summary Get ticket details
   */
  const ticketsGetTicketById = (
    ticketId: string,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<TicketDetailsResponseDto>(
      { url: `/api/support/tickets/${ticketId}`, method: "GET" },
      options,
    );
  };
  /**
   * Atualizar um ticket. Usu치rios podem atualizar seus pr칩prios tickets, coordenadores podem atualizar qualquer ticket.
   * @summary Update ticket
   */
  const ticketsUpdateTicket = (
    ticketId: string,
    updateTicketDto: UpdateTicketDto,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<TicketResponseDto>(
      {
        url: `/api/support/tickets/${ticketId}`,
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        data: updateTicketDto,
      },
      options,
    );
  };
  /**
   * Atualizar status de um ticket. Apenas coordenadores podem alterar o status.
   * @summary Update ticket status
   */
  const ticketsUpdateTicketStatus = (
    ticketId: string,
    ticketsUpdateTicketStatusBody: TicketsUpdateTicketStatusBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<TicketResponseDto>(
      {
        url: `/api/support/tickets/${ticketId}/status`,
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        data: ticketsUpdateTicketStatusBody,
      },
      options,
    );
  };
  const ticketsAddMessage = (
    ticketId: string,
    addTicketMessageDto: AddTicketMessageDto,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<void>(
      {
        url: `/api/support/tickets/${ticketId}/messages`,
        method: "POST",
        headers: { "Content-Type": "application/json" },
        data: addTicketMessageDto,
      },
      options,
    );
  };
  /**
   * Atribuir ticket a um agente. Apenas coordenadores podem atribuir tickets.
   * @summary Assign ticket to agent
   */
  const ticketsAssignTicket = (
    ticketId: string,
    ticketsAssignTicketBody: TicketsAssignTicketBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<TicketResponseDto>(
      {
        url: `/api/support/tickets/${ticketId}/assign`,
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        data: ticketsAssignTicketBody,
      },
      options,
    );
  };
  return {
    ticketsCreateTicket,
    ticketsGetTickets,
    ticketsGetTicketById,
    ticketsUpdateTicket,
    ticketsUpdateTicketStatus,
    ticketsAddMessage,
    ticketsAssignTicket,
  };
};
export type TicketsCreateTicketResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getSupportTickets>["ticketsCreateTicket"]>
  >
>;
export type TicketsGetTicketsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSupportTickets>["ticketsGetTickets"]>>
>;
export type TicketsGetTicketByIdResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getSupportTickets>["ticketsGetTicketById"]>
  >
>;
export type TicketsUpdateTicketResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getSupportTickets>["ticketsUpdateTicket"]>
  >
>;
export type TicketsUpdateTicketStatusResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getSupportTickets>["ticketsUpdateTicketStatus"]
    >
  >
>;
export type TicketsAddMessageResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSupportTickets>["ticketsAddMessage"]>>
>;
export type TicketsAssignTicketResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getSupportTickets>["ticketsAssignTicket"]>
  >
>;

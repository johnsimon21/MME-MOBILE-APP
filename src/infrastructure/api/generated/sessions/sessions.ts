/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * MME API Documentation
 * 
      API documentation for Meu Mentor Eiffel system
      
      ## Authentication
      This API uses Firebase Authentication with Bearer tokens.
      
      ## Base URL
      - Development: http://localhost:3000/api
      - Production: https://your-domain.com/api
      
      ## Rate Limiting
      - 100 requests per 15 minutes per IP
      - Additional limits may apply to specific endpoints
      
      ## Error Handling
      All endpoints return consistent error responses with proper HTTP status codes.
    
 * OpenAPI spec version: 1.0.0
 */
import type {
  AddParticipantDto,
  ChatSessionsListResponseDto,
  CreateSessionDto,
  RemoveParticipantDto,
  SessionActionDto,
  SessionResponseDto,
  SessionStatsResponseDto,
  SessionsDeleteSession200,
  SessionsFindSessionsParams,
  SessionsGetSessionStatsParams,
  UpdateSessionDto,
} from ".././model";

import { customInstance } from "../../custom-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getSessions = () => {
  /**
   * Create a new session with specified mentees and configuration. Only mentors can create sessions.
   * @summary Create new mentoring session
   */
  const sessionsCreateSession = (
    createSessionDto: CreateSessionDto,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<SessionResponseDto>(
      {
        url: `/api/sessions`,
        method: "POST",
        headers: { "Content-Type": "application/json" },
        data: createSessionDto,
      },
      options,
    );
  };
  /**
   * Retrieve sessions based on user role and filters. Users see only sessions they have access to.
   * @summary Get sessions with filters
   */
  const sessionsFindSessions = (
    params?: SessionsFindSessionsParams,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<ChatSessionsListResponseDto>(
      { url: `/api/sessions`, method: "GET", params },
      options,
    );
  };
  /**
   * Retrieve session statistics. Coordinators see all stats, mentors see only their own.
   * @summary Get session statistics
   */
  const sessionsGetSessionStats = (
    params?: SessionsGetSessionStatsParams,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<SessionStatsResponseDto>(
      { url: `/api/sessions/stats`, method: "GET", params },
      options,
    );
  };
  /**
   * Retrieve session details. Access controlled by user role and session participation.
   * @summary Get session details
   */
  const sessionsFindSessionById = (
    sessionId: string,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<SessionResponseDto>(
      { url: `/api/sessions/${sessionId}`, method: "GET" },
      options,
    );
  };
  /**
   * Update session details. Coordinators can update any session, mentors can update only their own.
   * @summary Update session
   */
  const sessionsUpdateSession = (
    sessionId: string,
    updateSessionDto: UpdateSessionDto,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<SessionResponseDto>(
      {
        url: `/api/sessions/${sessionId}`,
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        data: updateSessionDto,
      },
      options,
    );
  };
  /**
   * Cancel a scheduled session or delete it permanently. Coordinators can delete any session, mentors only their own.
   * @summary Cancel/Delete session
   */
  const sessionsDeleteSession = (
    sessionId: string,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<SessionsDeleteSession200>(
      { url: `/api/sessions/${sessionId}`, method: "DELETE" },
      options,
    );
  };
  /**
   * Perform actions like start, pause, resume, end, or cancel session. Access controlled by role and ownership.
   * @summary Perform session action
   */
  const sessionsPerformSessionAction = (
    sessionId: string,
    sessionActionDto: SessionActionDto,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<SessionResponseDto>(
      {
        url: `/api/sessions/${sessionId}/actions`,
        method: "POST",
        headers: { "Content-Type": "application/json" },
        data: sessionActionDto,
      },
      options,
    );
  };
  /**
   * Add a mentee to an existing session. Coordinators can add to any session, mentors only to their own.
   * @summary Add participant to session
   */
  const sessionsAddParticipant = (
    sessionId: string,
    addParticipantDto: AddParticipantDto,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<SessionResponseDto>(
      {
        url: `/api/sessions/${sessionId}/participants`,
        method: "POST",
        headers: { "Content-Type": "application/json" },
        data: addParticipantDto,
      },
      options,
    );
  };
  /**
   * Remove a mentee from a session. Coordinators can remove from any session, mentors only from their own.
   * @summary Remove participant from session
   */
  const sessionsRemoveParticipant = (
    sessionId: string,
    menteeId: string,
    removeParticipantDto: RemoveParticipantDto,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<SessionResponseDto>(
      {
        url: `/api/sessions/${sessionId}/participants/${menteeId}`,
        method: "DELETE",
        headers: { "Content-Type": "application/json" },
        data: removeParticipantDto,
      },
      options,
    );
  };
  return {
    sessionsCreateSession,
    sessionsFindSessions,
    sessionsGetSessionStats,
    sessionsFindSessionById,
    sessionsUpdateSession,
    sessionsDeleteSession,
    sessionsPerformSessionAction,
    sessionsAddParticipant,
    sessionsRemoveParticipant,
  };
};
export type SessionsCreateSessionResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSessions>["sessionsCreateSession"]>>
>;
export type SessionsFindSessionsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSessions>["sessionsFindSessions"]>>
>;
export type SessionsGetSessionStatsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSessions>["sessionsGetSessionStats"]>>
>;
export type SessionsFindSessionByIdResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSessions>["sessionsFindSessionById"]>>
>;
export type SessionsUpdateSessionResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSessions>["sessionsUpdateSession"]>>
>;
export type SessionsDeleteSessionResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSessions>["sessionsDeleteSession"]>>
>;
export type SessionsPerformSessionActionResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getSessions>["sessionsPerformSessionAction"]>
  >
>;
export type SessionsAddParticipantResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSessions>["sessionsAddParticipant"]>>
>;
export type SessionsRemoveParticipantResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getSessions>["sessionsRemoveParticipant"]>
  >
>;

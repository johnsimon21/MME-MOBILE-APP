/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * MME API Documentation
 * 
      API documentation for Meu Mentor Eiffel system
      
      ## Authentication
      This API uses Firebase Authentication with Bearer tokens.
      
      ## Base URL
      - Development: http://localhost:3000/api
      - Production: https://your-domain.com/api
      
      ## Rate Limiting
      - 100 requests per 15 minutes per IP
      - Additional limits may apply to specific endpoints
      
      ## Error Handling
      All endpoints return consistent error responses with proper HTTP status codes.
    
 * OpenAPI spec version: 1.0.0
 */
import { faker } from "@faker-js/faker";

import { HttpResponse, delay, http } from "msw";

import type {
  ChatSessionsListResponseDto,
  SessionResponseDto,
  SessionStatsResponseDto,
  SessionsDeleteSession200,
} from ".././model";

export const getSessionsCreateSessionResponseMock = (
  overrideResponse: Partial<SessionResponseDto> = {},
): SessionResponseDto => ({ ...overrideResponse });

export const getSessionsFindSessionsResponseMock = (
  overrideResponse: Partial<ChatSessionsListResponseDto> = {},
): ChatSessionsListResponseDto => ({ ...overrideResponse });

export const getSessionsGetSessionStatsResponseMock = (
  overrideResponse: Partial<SessionStatsResponseDto> = {},
): SessionStatsResponseDto => ({ ...overrideResponse });

export const getSessionsFindSessionByIdResponseMock = (
  overrideResponse: Partial<SessionResponseDto> = {},
): SessionResponseDto => ({ ...overrideResponse });

export const getSessionsUpdateSessionResponseMock = (
  overrideResponse: Partial<SessionResponseDto> = {},
): SessionResponseDto => ({ ...overrideResponse });

export const getSessionsDeleteSessionResponseMock = (
  overrideResponse: Partial<SessionsDeleteSession200> = {},
): SessionsDeleteSession200 => ({
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getSessionsPerformSessionActionResponseMock = (
  overrideResponse: Partial<SessionResponseDto> = {},
): SessionResponseDto => ({ ...overrideResponse });

export const getSessionsAddParticipantResponseMock = (
  overrideResponse: Partial<SessionResponseDto> = {},
): SessionResponseDto => ({ ...overrideResponse });

export const getSessionsRemoveParticipantResponseMock = (
  overrideResponse: Partial<SessionResponseDto> = {},
): SessionResponseDto => ({ ...overrideResponse });

export const getSessionsCreateSessionMockHandler = (
  overrideResponse?:
    | SessionResponseDto
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<SessionResponseDto> | SessionResponseDto),
) => {
  return http.post("*/api/sessions", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getSessionsCreateSessionResponseMock(),
      ),
      { status: 201, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getSessionsFindSessionsMockHandler = (
  overrideResponse?:
    | ChatSessionsListResponseDto
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<ChatSessionsListResponseDto> | ChatSessionsListResponseDto),
) => {
  return http.get("*/api/sessions", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getSessionsFindSessionsResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getSessionsGetSessionStatsMockHandler = (
  overrideResponse?:
    | SessionStatsResponseDto
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<SessionStatsResponseDto> | SessionStatsResponseDto),
) => {
  return http.get("*/api/sessions/stats", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getSessionsGetSessionStatsResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getSessionsFindSessionByIdMockHandler = (
  overrideResponse?:
    | SessionResponseDto
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<SessionResponseDto> | SessionResponseDto),
) => {
  return http.get("*/api/sessions/:sessionId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getSessionsFindSessionByIdResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getSessionsUpdateSessionMockHandler = (
  overrideResponse?:
    | SessionResponseDto
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<SessionResponseDto> | SessionResponseDto),
) => {
  return http.put("*/api/sessions/:sessionId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getSessionsUpdateSessionResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getSessionsDeleteSessionMockHandler = (
  overrideResponse?:
    | SessionsDeleteSession200
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<SessionsDeleteSession200> | SessionsDeleteSession200),
) => {
  return http.delete("*/api/sessions/:sessionId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getSessionsDeleteSessionResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getSessionsPerformSessionActionMockHandler = (
  overrideResponse?:
    | SessionResponseDto
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<SessionResponseDto> | SessionResponseDto),
) => {
  return http.post("*/api/sessions/:sessionId/actions", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getSessionsPerformSessionActionResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getSessionsAddParticipantMockHandler = (
  overrideResponse?:
    | SessionResponseDto
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<SessionResponseDto> | SessionResponseDto),
) => {
  return http.post("*/api/sessions/:sessionId/participants", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getSessionsAddParticipantResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getSessionsRemoveParticipantMockHandler = (
  overrideResponse?:
    | SessionResponseDto
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<SessionResponseDto> | SessionResponseDto),
) => {
  return http.delete(
    "*/api/sessions/:sessionId/participants/:menteeId",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getSessionsRemoveParticipantResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
  );
};
export const getSessionsMock = () => [
  getSessionsCreateSessionMockHandler(),
  getSessionsFindSessionsMockHandler(),
  getSessionsGetSessionStatsMockHandler(),
  getSessionsFindSessionByIdMockHandler(),
  getSessionsUpdateSessionMockHandler(),
  getSessionsDeleteSessionMockHandler(),
  getSessionsPerformSessionActionMockHandler(),
  getSessionsAddParticipantMockHandler(),
  getSessionsRemoveParticipantMockHandler(),
];

/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * MME API Documentation
 * 
      API documentation for Meu Mentor Eiffel system
      
      ## Authentication
      This API uses Firebase Authentication with Bearer tokens.
      
      ## Base URL
      - Development: http://localhost:3000/api
      - Production: https://your-domain.com/api
      
      ## Rate Limiting
      - 100 requests per 15 minutes per IP
      - Additional limits may apply to specific endpoints
      
      ## Error Handling
      All endpoints return consistent error responses with proper HTTP status codes.
    
 * OpenAPI spec version: 1.0.0
 */
import { faker } from "@faker-js/faker";

import { HttpResponse, delay, http } from "msw";

import type {
  ReportResponseDto,
  ReportsExportReport200,
  ReportsListResponseDto,
  ReportsScheduleReport201,
} from ".././model";

export const getReportsGenerateReportResponseMock = (
  overrideResponse: Partial<ReportResponseDto> = {},
): ReportResponseDto => ({
  reportId: faker.string.alpha({ length: { min: 10, max: 20 } }),
  title: faker.string.alpha({ length: { min: 10, max: 20 } }),
  type: faker.helpers.arrayElement([
    "mentorship_overview",
    "user_performance",
  ] as const),
  startDate: faker.string.alpha({ length: { min: 10, max: 20 } }),
  endDate: faker.string.alpha({ length: { min: 10, max: 20 } }),
  metrics: {
    totalSessions: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    completedSessions: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    completionRate: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    uniqueParticipants: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    activeMentors: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    activeMentees: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    averageSessionDuration: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    totalMentoringHours: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    averageRating: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    cancelledSessions: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
  },
  schoolPerformance: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    school: faker.string.alpha({ length: { min: 10, max: 20 } }),
    totalSessions: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    completionRate: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    averageRating: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    activeMentors: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    activeMentees: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    totalHours: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
  })),
  topMentors: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    mentorId: faker.string.alpha({ length: { min: 10, max: 20 } }),
    mentorName: faker.string.alpha({ length: { min: 10, max: 20 } }),
    school: faker.string.alpha({ length: { min: 10, max: 20 } }),
    totalSessions: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    completedSessions: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    completionRate: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    averageRating: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    totalHours: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    uniqueMentees: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    subjects: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
  })),
  subjectAnalytics: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    subject: faker.string.alpha({ length: { min: 10, max: 20 } }),
    sessionCount: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    averageRating: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    completionRate: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    totalHours: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    uniqueMentors: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    uniqueMentees: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
  })),
  trendData: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    period: faker.string.alpha({ length: { min: 10, max: 20 } }),
    sessions: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    completedSessions: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    uniqueUsers: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    totalHours: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    averageRating: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
  })),
  generatedAt: faker.string.alpha({ length: { min: 10, max: 20 } }),
  generatedBy: faker.string.alpha({ length: { min: 10, max: 20 } }),
  insights: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  keyFindings: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getReportsGetReportsResponseMock = (
  overrideResponse: Partial<ReportsListResponseDto> = {},
): ReportsListResponseDto => ({
  reports: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.string.alpha({ length: { min: 10, max: 20 } }),
    title: faker.string.alpha({ length: { min: 10, max: 20 } }),
    type: faker.helpers.arrayElement([
      "mentorship_overview",
      "user_performance",
    ] as const),
    generatedAt: faker.string.alpha({ length: { min: 10, max: 20 } }),
    generatedBy: faker.string.alpha({ length: { min: 10, max: 20 } }),
    status: faker.string.alpha({ length: { min: 10, max: 20 } }),
    downloadUrl: faker.string.alpha({ length: { min: 10, max: 20 } }),
  })),
  total: faker.number.float({
    min: undefined,
    max: undefined,
    fractionDigits: 2,
  }),
  page: faker.number.float({
    min: undefined,
    max: undefined,
    fractionDigits: 2,
  }),
  limit: faker.number.float({
    min: undefined,
    max: undefined,
    fractionDigits: 2,
  }),
  totalPages: faker.number.float({
    min: undefined,
    max: undefined,
    fractionDigits: 2,
  }),
  ...overrideResponse,
});

export const getReportsGetReportResponseMock = (
  overrideResponse: Partial<ReportResponseDto> = {},
): ReportResponseDto => ({
  reportId: faker.string.alpha({ length: { min: 10, max: 20 } }),
  title: faker.string.alpha({ length: { min: 10, max: 20 } }),
  type: faker.helpers.arrayElement([
    "mentorship_overview",
    "user_performance",
  ] as const),
  startDate: faker.string.alpha({ length: { min: 10, max: 20 } }),
  endDate: faker.string.alpha({ length: { min: 10, max: 20 } }),
  metrics: {
    totalSessions: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    completedSessions: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    completionRate: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    uniqueParticipants: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    activeMentors: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    activeMentees: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    averageSessionDuration: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    totalMentoringHours: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    averageRating: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    cancelledSessions: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
  },
  schoolPerformance: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    school: faker.string.alpha({ length: { min: 10, max: 20 } }),
    totalSessions: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    completionRate: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    averageRating: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    activeMentors: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    activeMentees: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    totalHours: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
  })),
  topMentors: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    mentorId: faker.string.alpha({ length: { min: 10, max: 20 } }),
    mentorName: faker.string.alpha({ length: { min: 10, max: 20 } }),
    school: faker.string.alpha({ length: { min: 10, max: 20 } }),
    totalSessions: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    completedSessions: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    completionRate: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    averageRating: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    totalHours: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    uniqueMentees: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    subjects: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
  })),
  subjectAnalytics: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    subject: faker.string.alpha({ length: { min: 10, max: 20 } }),
    sessionCount: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    averageRating: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    completionRate: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    totalHours: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    uniqueMentors: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    uniqueMentees: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
  })),
  trendData: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    period: faker.string.alpha({ length: { min: 10, max: 20 } }),
    sessions: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    completedSessions: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    uniqueUsers: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    totalHours: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    averageRating: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
  })),
  generatedAt: faker.string.alpha({ length: { min: 10, max: 20 } }),
  generatedBy: faker.string.alpha({ length: { min: 10, max: 20 } }),
  insights: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  keyFindings: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getReportsExportReportResponseMock = (
  overrideResponse: Partial<ReportsExportReport200> = {},
): ReportsExportReport200 => ({
  downloadUrl: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getReportsScheduleReportResponseMock = (
  overrideResponse: Partial<ReportsScheduleReport201> = {},
): ReportsScheduleReport201 => ({
  scheduleId: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getReportsGenerateReportMockHandler = (
  overrideResponse?:
    | ReportResponseDto
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<ReportResponseDto> | ReportResponseDto),
) => {
  return http.post("*/api/reports/generate", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getReportsGenerateReportResponseMock(),
      ),
      { status: 201, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getReportsGetReportsMockHandler = (
  overrideResponse?:
    | ReportsListResponseDto
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<ReportsListResponseDto> | ReportsListResponseDto),
) => {
  return http.get("*/api/reports", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getReportsGetReportsResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getReportsGetReportMockHandler = (
  overrideResponse?:
    | ReportResponseDto
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<ReportResponseDto> | ReportResponseDto),
) => {
  return http.get("*/api/reports/:reportId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getReportsGetReportResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getReportsDeleteReportMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.delete("*/api/reports/:reportId", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getReportsExportReportMockHandler = (
  overrideResponse?:
    | ReportsExportReport200
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<ReportsExportReport200> | ReportsExportReport200),
) => {
  return http.post("*/api/reports/export", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getReportsExportReportResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getReportsScheduleReportMockHandler = (
  overrideResponse?:
    | ReportsScheduleReport201
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<ReportsScheduleReport201> | ReportsScheduleReport201),
) => {
  return http.post("*/api/reports/schedule", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getReportsScheduleReportResponseMock(),
      ),
      { status: 201, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getReportsGetScheduledReportsMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.get("*/api/reports/scheduled/list", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getReportsCancelScheduledReportMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.delete("*/api/reports/scheduled/:scheduleId", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getReportsGetReportChartsMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.get("*/api/reports/:reportId/charts", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getReportsGetDashboardAnalyticsMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.get("*/api/reports/analytics/dashboard", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getReportsGetComparisonAnalyticsMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.get("*/api/reports/analytics/comparison", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getReportsGetMyPerformanceMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.get("*/api/reports/quick/my-performance", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getReportsGetSchoolOverviewMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.get("*/api/reports/quick/school-overview", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};
export const getReportsAnalyticsMock = () => [
  getReportsGenerateReportMockHandler(),
  getReportsGetReportsMockHandler(),
  getReportsGetReportMockHandler(),
  getReportsDeleteReportMockHandler(),
  getReportsExportReportMockHandler(),
  getReportsScheduleReportMockHandler(),
  getReportsGetScheduledReportsMockHandler(),
  getReportsCancelScheduledReportMockHandler(),
  getReportsGetReportChartsMockHandler(),
  getReportsGetDashboardAnalyticsMockHandler(),
  getReportsGetComparisonAnalyticsMockHandler(),
  getReportsGetMyPerformanceMockHandler(),
  getReportsGetSchoolOverviewMockHandler(),
];

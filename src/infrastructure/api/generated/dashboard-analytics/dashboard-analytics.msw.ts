/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * MME API Documentation
 * 
      API documentation for Meu Mentor Eiffel system
      
      ## Authentication
      This API uses Firebase Authentication with Bearer tokens.
      
      ## Base URL
      - Development: http://localhost:3000/api
      - Production: https://your-domain.com/api
      
      ## Rate Limiting
      - 100 requests per 15 minutes per IP
      - Additional limits may apply to specific endpoints
      
      ## Error Handling
      All endpoints return consistent error responses with proper HTTP status codes.
    
 * OpenAPI spec version: 1.0.0
 */
import { faker } from "@faker-js/faker";

import { HttpResponse, delay, http } from "msw";

import type {
  DashboardGetRealTimeStats200,
  DashboardStatsResponseDto,
  SessionAnalyticsResponseDto,
  UserAnalyticsListResponseDto,
} from ".././model";

export const getDashboardGetDashboardStatsResponseMock = (
  overrideResponse: Partial<DashboardStatsResponseDto> = {},
): DashboardStatsResponseDto => ({
  totalUsers: faker.number.float({
    min: undefined,
    max: undefined,
    fractionDigits: 2,
  }),
  activeSessions: faker.number.float({
    min: undefined,
    max: undefined,
    fractionDigits: 2,
  }),
  totalSessions: faker.number.float({
    min: undefined,
    max: undefined,
    fractionDigits: 2,
  }),
  pendingSessions: faker.number.float({
    min: undefined,
    max: undefined,
    fractionDigits: 2,
  }),
  usersByRole: {},
  recentActivity: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.string.alpha({ length: { min: 10, max: 20 } }),
    type: faker.helpers.arrayElement([
      "user_registered",
      "session_created",
      "session_completed",
      "user_login",
    ] as const),
    userId: faker.string.alpha({ length: { min: 10, max: 20 } }),
    userName: faker.string.alpha({ length: { min: 10, max: 20 } }),
    description: faker.string.alpha({ length: { min: 10, max: 20 } }),
    timestamp: `${faker.date.past().toISOString().split(".")[0]}Z`,
    metadata: faker.helpers.arrayElement([{}, undefined]),
  })),
  systemHealth: {
    ...{
      uptime: faker.number.float({
        min: undefined,
        max: undefined,
        fractionDigits: 2,
      }),
      activeConnections: faker.number.float({
        min: undefined,
        max: undefined,
        fractionDigits: 2,
      }),
      memoryUsage: faker.number.float({
        min: undefined,
        max: undefined,
        fractionDigits: 2,
      }),
      responseTime: faker.number.float({
        min: undefined,
        max: undefined,
        fractionDigits: 2,
      }),
      errorRate: faker.number.float({
        min: undefined,
        max: undefined,
        fractionDigits: 2,
      }),
      lastUpdated: `${faker.date.past().toISOString().split(".")[0]}Z`,
    },
  },
  ...overrideResponse,
});

export const getDashboardGetUserAnalyticsResponseMock = (
  overrideResponse: Partial<UserAnalyticsListResponseDto> = {},
): UserAnalyticsListResponseDto => ({
  users: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    userId: faker.string.alpha({ length: { min: 10, max: 20 } }),
    fullName: faker.string.alpha({ length: { min: 10, max: 20 } }),
    email: faker.string.alpha({ length: { min: 10, max: 20 } }),
    role: faker.helpers.arrayElement([
      "mentor",
      "mentee",
      "coordinator",
    ] as const),
    school: faker.helpers.arrayElement([
      "CAXITO",
      "MALANJE",
      "NDALATANDO",
      "ONDJIVA",
    ] as const),
    isOnline: faker.datatype.boolean(),
    lastActive: `${faker.date.past().toISOString().split(".")[0]}Z`,
    sessionsCount: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    completedSessions: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    completionRate: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    joinedDate: `${faker.date.past().toISOString().split(".")[0]}Z`,
    profileImage: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined,
    ]),
    averageRating: faker.helpers.arrayElement([
      faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
      undefined,
    ]),
    totalHours: faker.helpers.arrayElement([
      faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
      undefined,
    ]),
  })),
  total: faker.number.float({
    min: undefined,
    max: undefined,
    fractionDigits: 2,
  }),
  page: faker.number.float({
    min: undefined,
    max: undefined,
    fractionDigits: 2,
  }),
  limit: faker.number.float({
    min: undefined,
    max: undefined,
    fractionDigits: 2,
  }),
  totalPages: faker.number.float({
    min: undefined,
    max: undefined,
    fractionDigits: 2,
  }),
  summary: {},
  ...overrideResponse,
});

export const getDashboardGetSessionAnalyticsResponseMock = (
  overrideResponse: Partial<SessionAnalyticsResponseDto> = {},
): SessionAnalyticsResponseDto => ({
  totalSessions: faker.number.float({
    min: undefined,
    max: undefined,
    fractionDigits: 2,
  }),
  activeSessions: faker.number.float({
    min: undefined,
    max: undefined,
    fractionDigits: 2,
  }),
  completedSessions: faker.number.float({
    min: undefined,
    max: undefined,
    fractionDigits: 2,
  }),
  cancelledSessions: faker.number.float({
    min: undefined,
    max: undefined,
    fractionDigits: 2,
  }),
  averageDuration: faker.number.float({
    min: undefined,
    max: undefined,
    fractionDigits: 2,
  }),
  sessionsByType: {},
  sessionsByStatus: {},
  popularSubjects: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    subject: faker.string.alpha({ length: { min: 10, max: 20 } }),
    sessionCount: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    averageRating: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    totalDuration: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    completionRate: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
  })),
  schoolStats: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    school: faker.helpers.arrayElement([
      "CAXITO",
      "MALANJE",
      "NDALATANDO",
      "ONDJIVA",
    ] as const),
    totalUsers: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    mentors: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    mentees: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    coordinators: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    activeSessions: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    totalSessions: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
  })),
  ...overrideResponse,
});

export const getDashboardExportUserDataResponseMock = (): Blob =>
  new Blob(faker.helpers.arrayElements(faker.word.words(10).split(" ")));

export const getDashboardGetRealTimeStatsResponseMock = (
  overrideResponse: Partial<DashboardGetRealTimeStats200> = {},
): DashboardGetRealTimeStats200 => ({
  onlineUsers: faker.helpers.arrayElement([
    faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    undefined,
  ]),
  activeSessions: faker.helpers.arrayElement([
    faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    undefined,
  ]),
  activeConnections: faker.helpers.arrayElement([
    faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    undefined,
  ]),
  systemLoad: faker.helpers.arrayElement([
    faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    undefined,
  ]),
  lastUpdated: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  ...overrideResponse,
});

export const getDashboardGetDashboardStatsMockHandler = (
  overrideResponse?:
    | DashboardStatsResponseDto
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<DashboardStatsResponseDto> | DashboardStatsResponseDto),
) => {
  return http.get("*/api/dashboard/dashboard", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getDashboardGetDashboardStatsResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getDashboardGetUserAnalyticsMockHandler = (
  overrideResponse?:
    | UserAnalyticsListResponseDto
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<UserAnalyticsListResponseDto>
        | UserAnalyticsListResponseDto),
) => {
  return http.get("*/api/dashboard/users", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getDashboardGetUserAnalyticsResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getDashboardGetSessionAnalyticsMockHandler = (
  overrideResponse?:
    | SessionAnalyticsResponseDto
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<SessionAnalyticsResponseDto> | SessionAnalyticsResponseDto),
) => {
  return http.get("*/api/dashboard/sessions", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getDashboardGetSessionAnalyticsResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getDashboardExportUserDataMockHandler = (
  overrideResponse?:
    | Blob
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<Blob> | Blob),
) => {
  return http.get("*/api/dashboard/export/users", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getDashboardExportUserDataResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getDashboardGetRealTimeStatsMockHandler = (
  overrideResponse?:
    | DashboardGetRealTimeStats200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<DashboardGetRealTimeStats200>
        | DashboardGetRealTimeStats200),
) => {
  return http.get("*/api/dashboard/real-time/stats", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getDashboardGetRealTimeStatsResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};
export const getDashboardAnalyticsMock = () => [
  getDashboardGetDashboardStatsMockHandler(),
  getDashboardGetUserAnalyticsMockHandler(),
  getDashboardGetSessionAnalyticsMockHandler(),
  getDashboardExportUserDataMockHandler(),
  getDashboardGetRealTimeStatsMockHandler(),
];

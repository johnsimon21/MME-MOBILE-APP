/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * MME API Documentation
 * 
      API documentation for Meu Mentor Eiffel system
      
      ## Authentication
      This API uses Firebase Authentication with Bearer tokens.
      
      ## Base URL
      - Development: http://localhost:3000/api
      - Production: https://your-domain.com/api
      
      ## Rate Limiting
      - 100 requests per 15 minutes per IP
      - Additional limits may apply to specific endpoints
      
      ## Error Handling
      All endpoints return consistent error responses with proper HTTP status codes.
    
 * OpenAPI spec version: 1.0.0
 */
import type {
  DashboardExportUserDataParams,
  DashboardGetDashboardStatsParams,
  DashboardGetRealTimeStats200,
  DashboardGetSessionAnalyticsParams,
  DashboardGetUserAnalyticsParams,
  DashboardStatsResponseDto,
  SessionAnalyticsResponseDto,
  UserAnalyticsListResponseDto,
} from ".././model";

import { customInstance } from "../../custom-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getDashboardAnalytics = () => {
  /**
   * Retrieve comprehensive dashboard statistics including user counts, session metrics, and system health. Only available to coordinators.
   * @summary Get dashboard statistics
   */
  const dashboardGetDashboardStats = (
    params?: DashboardGetDashboardStatsParams,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<DashboardStatsResponseDto>(
      { url: `/api/dashboard/dashboard`, method: "GET", params },
      options,
    );
  };
  /**
   * Retrieve detailed user analytics with filtering, sorting, and pagination. Only available to coordinators.
   * @summary Get user analytics
   */
  const dashboardGetUserAnalytics = (
    params?: DashboardGetUserAnalyticsParams,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<UserAnalyticsListResponseDto>(
      { url: `/api/dashboard/users`, method: "GET", params },
      options,
    );
  };
  /**
   * Retrieve comprehensive session analytics. Coordinators see all sessions, mentors see only their own sessions.
   * @summary Get session analytics
   */
  const dashboardGetSessionAnalytics = (
    params?: DashboardGetSessionAnalyticsParams,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<SessionAnalyticsResponseDto>(
      { url: `/api/dashboard/sessions`, method: "GET", params },
      options,
    );
  };
  /**
   * Export user analytics data as CSV or Excel file. Only available to coordinators.
   * @summary Export user data
   */
  const dashboardExportUserData = (
    params?: DashboardExportUserDataParams,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<Blob>(
      {
        url: `/api/dashboard/export/users`,
        method: "GET",
        params,
        responseType: "blob",
      },
      options,
    );
  };
  /**
   * Get real-time system statistics for live dashboard updates. Available to coordinators and mentors.
   * @summary Get real-time statistics
   */
  const dashboardGetRealTimeStats = (
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<DashboardGetRealTimeStats200>(
      { url: `/api/dashboard/real-time/stats`, method: "GET" },
      options,
    );
  };
  return {
    dashboardGetDashboardStats,
    dashboardGetUserAnalytics,
    dashboardGetSessionAnalytics,
    dashboardExportUserData,
    dashboardGetRealTimeStats,
  };
};
export type DashboardGetDashboardStatsResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getDashboardAnalytics>["dashboardGetDashboardStats"]
    >
  >
>;
export type DashboardGetUserAnalyticsResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getDashboardAnalytics>["dashboardGetUserAnalytics"]
    >
  >
>;
export type DashboardGetSessionAnalyticsResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getDashboardAnalytics>["dashboardGetSessionAnalytics"]
    >
  >
>;
export type DashboardExportUserDataResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getDashboardAnalytics>["dashboardExportUserData"]
    >
  >
>;
export type DashboardGetRealTimeStatsResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getDashboardAnalytics>["dashboardGetRealTimeStats"]
    >
  >
>;

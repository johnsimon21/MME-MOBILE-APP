/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * MME API Documentation
 * 
      API documentation for Meu Mentor Eiffel system
      
      ## Authentication
      This API uses Firebase Authentication with Bearer tokens.
      
      ## Base URL
      - Development: http://localhost:3000/api
      - Production: https://your-domain.com/api
      
      ## Rate Limiting
      - 100 requests per 15 minutes per IP
      - Additional limits may apply to specific endpoints
      
      ## Error Handling
      All endpoints return consistent error responses with proper HTTP status codes.
    
 * OpenAPI spec version: 1.0.0
 */
import { HttpResponse, delay, http } from "msw";

import type {
  ChatResponseDto,
  ChatsListResponseDto,
  MessageResponseDto,
  MessagesListResponseDto,
} from ".././model";

export const getChatCreateChatResponseMock = (
  overrideResponse: Partial<ChatResponseDto> = {},
): ChatResponseDto => ({ ...overrideResponse });

export const getChatGetUserChatsResponseMock = (
  overrideResponse: Partial<ChatsListResponseDto> = {},
): ChatsListResponseDto => ({ ...overrideResponse });

export const getChatSendMessageResponseMock = (
  overrideResponse: Partial<MessageResponseDto> = {},
): MessageResponseDto => ({ ...overrideResponse });

export const getChatGetChatMessagesResponseMock = (
  overrideResponse: Partial<MessagesListResponseDto> = {},
): MessagesListResponseDto => ({ ...overrideResponse });

export const getChatCreateChatMockHandler = (
  overrideResponse?:
    | ChatResponseDto
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<ChatResponseDto> | ChatResponseDto),
) => {
  return http.post("*/api/chats", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getChatCreateChatResponseMock(),
      ),
      { status: 201, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getChatGetUserChatsMockHandler = (
  overrideResponse?:
    | ChatsListResponseDto
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<ChatsListResponseDto> | ChatsListResponseDto),
) => {
  return http.get("*/api/chats", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getChatGetUserChatsResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getChatSendMessageMockHandler = (
  overrideResponse?:
    | MessageResponseDto
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<MessageResponseDto> | MessageResponseDto),
) => {
  return http.post("*/api/chats/:chatId/messages", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getChatSendMessageResponseMock(),
      ),
      { status: 201, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getChatGetChatMessagesMockHandler = (
  overrideResponse?:
    | MessagesListResponseDto
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<MessagesListResponseDto> | MessagesListResponseDto),
) => {
  return http.get("*/api/chats/:chatId/messages", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getChatGetChatMessagesResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getChatSendFileMessageMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.post("*/api/chats/:chatId/messages/file", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 201 });
  });
};

export const getChatMarkMessagesAsReadMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.post("*/api/chats/:chatId/messages/read", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getChatDeleteMessageMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.delete(
    "*/api/chats/:chatId/messages/:messageId",
    async (info) => {
      await delay(1000);
      if (typeof overrideResponse === "function") {
        await overrideResponse(info);
      }
      return new HttpResponse(null, { status: 200 });
    },
  );
};

export const getChatDeleteFileMessageMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.delete(
    "*/api/chats/:chatId/messages/:messageId/file",
    async (info) => {
      await delay(1000);
      if (typeof overrideResponse === "function") {
        await overrideResponse(info);
      }
      return new HttpResponse(null, { status: 200 });
    },
  );
};

export const getChatAddMenteeToSessionMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.post("*/api/chats/:chatId/participants", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getChatRemoveMenteeFromSessionMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.delete(
    "*/api/chats/:chatId/participants/:menteeId",
    async (info) => {
      await delay(1000);
      if (typeof overrideResponse === "function") {
        await overrideResponse(info);
      }
      return new HttpResponse(null, { status: 200 });
    },
  );
};
export const getChatsMock = () => [
  getChatCreateChatMockHandler(),
  getChatGetUserChatsMockHandler(),
  getChatSendMessageMockHandler(),
  getChatGetChatMessagesMockHandler(),
  getChatSendFileMessageMockHandler(),
  getChatMarkMessagesAsReadMockHandler(),
  getChatDeleteMessageMockHandler(),
  getChatDeleteFileMessageMockHandler(),
  getChatAddMenteeToSessionMockHandler(),
  getChatRemoveMenteeFromSessionMockHandler(),
];

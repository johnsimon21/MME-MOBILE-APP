/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * MME API Documentation
 * 
      API documentation for Meu Mentor Eiffel system
      
      ## Authentication
      This API uses Firebase Authentication with Bearer tokens.
      
      ## Base URL
      - Development: http://localhost:3000/api
      - Production: https://your-domain.com/api
      
      ## Rate Limiting
      - 100 requests per 15 minutes per IP
      - Additional limits may apply to specific endpoints
      
      ## Error Handling
      All endpoints return consistent error responses with proper HTTP status codes.
    
 * OpenAPI spec version: 1.0.0
 */
import type {
  AddMenteeDto,
  ChatResponseDto,
  ChatSendFileMessageBody,
  ChatsListResponseDto,
  CreateChatDto,
  MessageResponseDto,
  MessagesListResponseDto,
  SendMessageDto,
} from ".././model";

import { customInstance } from "../../custom-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getChats = () => {
  /**
   * Create a new chat between users. Session chats require mentor role.
   * @summary Create new chat
   */
  const chatCreateChat = (
    createChatDto: CreateChatDto,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<ChatResponseDto>(
      {
        url: `/api/chats`,
        method: "POST",
        headers: { "Content-Type": "application/json" },
        data: createChatDto,
      },
      options,
    );
  };
  /**
   * Get all chats for the current user
   * @summary Get user chats
   */
  const chatGetUserChats = (
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<ChatsListResponseDto>(
      { url: `/api/chats`, method: "GET" },
      options,
    );
  };
  /**
   * Send a message to a chat. User must be a participant of the chat.
   * @summary Send message
   */
  const chatSendMessage = (
    chatId: string,
    sendMessageDto: SendMessageDto,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<MessageResponseDto>(
      {
        url: `/api/chats/${chatId}/messages`,
        method: "POST",
        headers: { "Content-Type": "application/json" },
        data: sendMessageDto,
      },
      options,
    );
  };
  /**
   * Get messages from a chat. User must be a participant of the chat.
   * @summary Get chat messages
   */
  const chatGetChatMessages = (
    chatId: string,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<MessagesListResponseDto>(
      { url: `/api/chats/${chatId}/messages`, method: "GET" },
      options,
    );
  };
  /**
 * 
    Send a file or image message to a chat.
    
    **Supported file types:**
    - Images: JPEG, PNG, GIF, WEBP
    - Documents: PDF, DOCX, TXT
    
    **File size limit:** 10MB
    
    **Required fields:**
    - file: The file to upload
    - type: Must be 'image' or 'file'
    
    **Optional fields:**
    - caption: Description for the file
    - replyTo: ID of message being replied to
  
 * @summary Send file message
 */
  const chatSendFileMessage = (
    chatId: string,
    chatSendFileMessageBody: ChatSendFileMessageBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    const formData = new FormData();
    formData.append(`file`, chatSendFileMessageBody.file);
    if (chatSendFileMessageBody.caption !== undefined) {
      formData.append(`caption`, chatSendFileMessageBody.caption);
    }
    formData.append(`type`, chatSendFileMessageBody.type);
    if (chatSendFileMessageBody.replyTo !== undefined) {
      formData.append(`replyTo`, chatSendFileMessageBody.replyTo);
    }

    return customInstance<unknown>(
      {
        url: `/api/chats/${chatId}/messages/file`,
        method: "POST",
        headers: { "Content-Type": "multipart/form-data" },
        data: formData,
      },
      options,
    );
  };
  /**
   * Mark all unread messages in a chat as read
   * @summary Mark messages as read
   */
  const chatMarkMessagesAsRead = (
    chatId: string,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<void>(
      { url: `/api/chats/${chatId}/messages/read`, method: "POST" },
      options,
    );
  };
  /**
   * Delete a message. Users can only delete their own messages.
   * @summary Delete message
   */
  const chatDeleteMessage = (
    chatId: string,
    messageId: string,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<void>(
      { url: `/api/chats/${chatId}/messages/${messageId}`, method: "DELETE" },
      options,
    );
  };
  /**
   * Delete a file message and its associated file
   * @summary Delete file message
   */
  const chatDeleteFileMessage = (
    chatId: string,
    messageId: string,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<void>(
      {
        url: `/api/chats/${chatId}/messages/${messageId}/file`,
        method: "DELETE",
      },
      options,
    );
  };
  /**
   * Add a mentee to a session chat. Only mentors can perform this action.
   * @summary Add mentee to session chat
   */
  const chatAddMenteeToSession = (
    chatId: string,
    addMenteeDto: AddMenteeDto,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<void>(
      {
        url: `/api/chats/${chatId}/participants`,
        method: "POST",
        headers: { "Content-Type": "application/json" },
        data: addMenteeDto,
      },
      options,
    );
  };
  /**
   * Remove a mentee from a session chat. Only mentors can perform this action.
   * @summary Remove mentee from session chat
   */
  const chatRemoveMenteeFromSession = (
    chatId: string,
    menteeId: string,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<void>(
      {
        url: `/api/chats/${chatId}/participants/${menteeId}`,
        method: "DELETE",
      },
      options,
    );
  };
  return {
    chatCreateChat,
    chatGetUserChats,
    chatSendMessage,
    chatGetChatMessages,
    chatSendFileMessage,
    chatMarkMessagesAsRead,
    chatDeleteMessage,
    chatDeleteFileMessage,
    chatAddMenteeToSession,
    chatRemoveMenteeFromSession,
  };
};
export type ChatCreateChatResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getChats>["chatCreateChat"]>>
>;
export type ChatGetUserChatsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getChats>["chatGetUserChats"]>>
>;
export type ChatSendMessageResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getChats>["chatSendMessage"]>>
>;
export type ChatGetChatMessagesResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getChats>["chatGetChatMessages"]>>
>;
export type ChatSendFileMessageResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getChats>["chatSendFileMessage"]>>
>;
export type ChatMarkMessagesAsReadResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getChats>["chatMarkMessagesAsRead"]>>
>;
export type ChatDeleteMessageResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getChats>["chatDeleteMessage"]>>
>;
export type ChatDeleteFileMessageResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getChats>["chatDeleteFileMessage"]>>
>;
export type ChatAddMenteeToSessionResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getChats>["chatAddMenteeToSession"]>>
>;
export type ChatRemoveMenteeFromSessionResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getChats>["chatRemoveMenteeFromSession"]>
  >
>;

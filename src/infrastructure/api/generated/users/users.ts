/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * MME API Documentation
 * 
      API documentation for Meu Mentor Eiffel system
      
      ## Authentication
      This API uses Firebase Authentication with Bearer tokens.
      
      ## Base URL
      - Development: http://localhost:3000/api
      - Production: https://your-domain.com/api
      
      ## Rate Limiting
      - 100 requests per 15 minutes per IP
      - Additional limits may apply to specific endpoints
      
      ## Error Handling
      All endpoints return consistent error responses with proper HTTP status codes.
    
 * OpenAPI spec version: 1.0.0
 */
import type {
  ConnectionsGetConnectionSuggestionsParams,
  SendConnectionRequestDto,
  UpdateUserDto,
  UserResponseDto,
  UsersFindAllParams,
  UsersListResponseDto,
} from ".././model";

import { customInstance } from "../../custom-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getUsers = () => {
  /**
   * @summary Get all users with filters
   */
  const usersFindAll = (
    params?: UsersFindAllParams,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<UsersListResponseDto>(
      { url: `/api/users`, method: "GET", params },
      options,
    );
  };
  /**
   * @summary Get users by role
   */
  const usersFindByRole = (
    role: "mentor" | "mentee" | "coordinator",
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<void>(
      { url: `/api/users/role/${role}`, method: "GET" },
      options,
    );
  };
  /**
   * @summary Get users by school
   */
  const usersFindBySchool = (
    school: string,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<UserResponseDto>(
      { url: `/api/users/school/${school}`, method: "GET" },
      options,
    );
  };
  /**
   * @summary Get user by ID
   */
  const usersFindOne = (
    uid: string,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<UserResponseDto>(
      { url: `/api/users/${uid}`, method: "GET" },
      options,
    );
  };
  /**
   * @summary Update user profile
   */
  const usersUpdate = (
    uid: string,
    updateUserDto: UpdateUserDto,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<UserResponseDto>(
      {
        url: `/api/users/${uid}`,
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        data: updateUserDto,
      },
      options,
    );
  };
  /**
   * @summary Delete user
   */
  const usersRemove = (
    uid: string,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<void>(
      { url: `/api/users/${uid}`, method: "DELETE" },
      options,
    );
  };
  /**
   * @summary Update user profile image
   */
  const usersUpdateImage = (
    uid: string,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<void>(
      { url: `/api/users/${uid}/image`, method: "PUT" },
      options,
    );
  };
  const connectionsSendConnectionRequest = (
    userId: string,
    sendConnectionRequestDto: SendConnectionRequestDto,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<void>(
      {
        url: `/api/users/${userId}/connections/send`,
        method: "POST",
        headers: { "Content-Type": "application/json" },
        data: sendConnectionRequestDto,
      },
      options,
    );
  };
  const connectionsAcceptConnectionRequest = (
    userId: string,
    connectionId: string,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<void>(
      {
        url: `/api/users/${userId}/connections/${connectionId}/accept`,
        method: "PUT",
      },
      options,
    );
  };
  const connectionsRejectConnectionRequest = (
    userId: string,
    connectionId: string,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<void>(
      {
        url: `/api/users/${userId}/connections/${connectionId}/reject`,
        method: "PUT",
      },
      options,
    );
  };
  const connectionsBlockUser = (
    userId: string,
    connectionId: string,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<void>(
      {
        url: `/api/users/${userId}/connections/${connectionId}/block`,
        method: "PUT",
      },
      options,
    );
  };
  const connectionsRemoveConnection = (
    userId: string,
    connectionId: string,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<void>(
      {
        url: `/api/users/${userId}/connections/${connectionId}`,
        method: "DELETE",
      },
      options,
    );
  };
  const connectionsGetUserConnections = (
    userId: string,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<void>(
      { url: `/api/users/${userId}/connections`, method: "GET" },
      options,
    );
  };
  const connectionsGetConnectionStats = (
    userId: string,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<void>(
      { url: `/api/users/${userId}/connections/stats`, method: "GET" },
      options,
    );
  };
  const connectionsGetConnectionSuggestions = (
    userId: string,
    params: ConnectionsGetConnectionSuggestionsParams,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<void>(
      {
        url: `/api/users/${userId}/connections/suggestions`,
        method: "GET",
        params,
      },
      options,
    );
  };
  const connectionsGetPendingConnections = (
    userId: string,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<void>(
      { url: `/api/users/${userId}/connections/pending`, method: "GET" },
      options,
    );
  };
  const connectionsGetFriends = (
    userId: string,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<void>(
      { url: `/api/users/${userId}/connections/friends`, method: "GET" },
      options,
    );
  };
  const connectionsGetMutualConnections = (
    userId: string,
    otherUserId: string,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<void>(
      {
        url: `/api/users/${userId}/connections/mutual/${otherUserId}`,
        method: "GET",
      },
      options,
    );
  };
  return {
    usersFindAll,
    usersFindByRole,
    usersFindBySchool,
    usersFindOne,
    usersUpdate,
    usersRemove,
    usersUpdateImage,
    connectionsSendConnectionRequest,
    connectionsAcceptConnectionRequest,
    connectionsRejectConnectionRequest,
    connectionsBlockUser,
    connectionsRemoveConnection,
    connectionsGetUserConnections,
    connectionsGetConnectionStats,
    connectionsGetConnectionSuggestions,
    connectionsGetPendingConnections,
    connectionsGetFriends,
    connectionsGetMutualConnections,
  };
};
export type UsersFindAllResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getUsers>["usersFindAll"]>>
>;
export type UsersFindByRoleResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getUsers>["usersFindByRole"]>>
>;
export type UsersFindBySchoolResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getUsers>["usersFindBySchool"]>>
>;
export type UsersFindOneResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getUsers>["usersFindOne"]>>
>;
export type UsersUpdateResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getUsers>["usersUpdate"]>>
>;
export type UsersRemoveResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getUsers>["usersRemove"]>>
>;
export type UsersUpdateImageResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getUsers>["usersUpdateImage"]>>
>;
export type ConnectionsSendConnectionRequestResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getUsers>["connectionsSendConnectionRequest"]>
  >
>;
export type ConnectionsAcceptConnectionRequestResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getUsers>["connectionsAcceptConnectionRequest"]
    >
  >
>;
export type ConnectionsRejectConnectionRequestResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getUsers>["connectionsRejectConnectionRequest"]
    >
  >
>;
export type ConnectionsBlockUserResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getUsers>["connectionsBlockUser"]>>
>;
export type ConnectionsRemoveConnectionResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getUsers>["connectionsRemoveConnection"]>
  >
>;
export type ConnectionsGetUserConnectionsResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getUsers>["connectionsGetUserConnections"]>
  >
>;
export type ConnectionsGetConnectionStatsResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getUsers>["connectionsGetConnectionStats"]>
  >
>;
export type ConnectionsGetConnectionSuggestionsResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getUsers>["connectionsGetConnectionSuggestions"]
    >
  >
>;
export type ConnectionsGetPendingConnectionsResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getUsers>["connectionsGetPendingConnections"]>
  >
>;
export type ConnectionsGetFriendsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getUsers>["connectionsGetFriends"]>>
>;
export type ConnectionsGetMutualConnectionsResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getUsers>["connectionsGetMutualConnections"]>
  >
>;

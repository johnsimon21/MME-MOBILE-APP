/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * MME API Documentation
 * 
      API documentation for Meu Mentor Eiffel system
      
      ## Authentication
      This API uses Firebase Authentication with Bearer tokens.
      
      ## Base URL
      - Development: http://localhost:3000/api
      - Production: https://your-domain.com/api
      
      ## Rate Limiting
      - 100 requests per 15 minutes per IP
      - Additional limits may apply to specific endpoints
      
      ## Error Handling
      All endpoints return consistent error responses with proper HTTP status codes.
    
 * OpenAPI spec version: 1.0.0
 */
import { faker } from "@faker-js/faker";

import { HttpResponse, delay, http } from "msw";

import type { UserResponseDto, UsersListResponseDto } from ".././model";

export const getUsersFindAllResponseMock = (
  overrideResponse: Partial<UsersListResponseDto> = {},
): UsersListResponseDto => ({
  users: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    uid: faker.string.alpha({ length: { min: 10, max: 20 } }),
    email: faker.string.alpha({ length: { min: 10, max: 20 } }),
    fullName: faker.string.alpha({ length: { min: 10, max: 20 } }),
    role: faker.helpers.arrayElement([
      "mentor",
      "mentee",
      "coordinator",
    ] as const),
    cellphone: faker.string.alpha({ length: { min: 10, max: 20 } }),
    birth: `${faker.date.past().toISOString().split(".")[0]}Z`,
    gender: faker.helpers.arrayElement(["male", "female"] as const),
    school: faker.helpers.arrayElement([
      "CAXITO",
      "MALANJE",
      "NDALATANDO",
      "ONDJIVA",
    ] as const),
    grade: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined,
    ]),
    maxMenteeNumber: faker.helpers.arrayElement([
      faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
      undefined,
    ]),
    difficulties: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
      undefined,
    ]),
    skills: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
      undefined,
    ]),
    image: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined,
    ]),
    province: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined,
    ]),
    municipality: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined,
    ]),
    schoolYear: faker.helpers.arrayElement([
      faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
      undefined,
    ]),
    portfolio: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined,
    ]),
    emotions: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
      undefined,
    ]),
    programs: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
      undefined,
    ]),
  })),
  total: faker.number.float({
    min: undefined,
    max: undefined,
    fractionDigits: 2,
  }),
  page: faker.number.float({
    min: undefined,
    max: undefined,
    fractionDigits: 2,
  }),
  limit: faker.number.float({
    min: undefined,
    max: undefined,
    fractionDigits: 2,
  }),
  totalPages: faker.number.float({
    min: undefined,
    max: undefined,
    fractionDigits: 2,
  }),
  ...overrideResponse,
});

export const getUsersFindBySchoolResponseMock = (
  overrideResponse: Partial<UserResponseDto> = {},
): UserResponseDto => ({
  uid: faker.string.alpha({ length: { min: 10, max: 20 } }),
  email: faker.string.alpha({ length: { min: 10, max: 20 } }),
  fullName: faker.string.alpha({ length: { min: 10, max: 20 } }),
  role: faker.helpers.arrayElement([
    "mentor",
    "mentee",
    "coordinator",
  ] as const),
  cellphone: faker.string.alpha({ length: { min: 10, max: 20 } }),
  birth: `${faker.date.past().toISOString().split(".")[0]}Z`,
  gender: faker.helpers.arrayElement(["male", "female"] as const),
  school: faker.helpers.arrayElement([
    "CAXITO",
    "MALANJE",
    "NDALATANDO",
    "ONDJIVA",
  ] as const),
  grade: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  maxMenteeNumber: faker.helpers.arrayElement([
    faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    undefined,
  ]),
  difficulties: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
    undefined,
  ]),
  skills: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
    undefined,
  ]),
  image: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  province: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  municipality: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  schoolYear: faker.helpers.arrayElement([
    faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    undefined,
  ]),
  portfolio: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  emotions: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
    undefined,
  ]),
  programs: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getUsersFindOneResponseMock = (
  overrideResponse: Partial<UserResponseDto> = {},
): UserResponseDto => ({
  uid: faker.string.alpha({ length: { min: 10, max: 20 } }),
  email: faker.string.alpha({ length: { min: 10, max: 20 } }),
  fullName: faker.string.alpha({ length: { min: 10, max: 20 } }),
  role: faker.helpers.arrayElement([
    "mentor",
    "mentee",
    "coordinator",
  ] as const),
  cellphone: faker.string.alpha({ length: { min: 10, max: 20 } }),
  birth: `${faker.date.past().toISOString().split(".")[0]}Z`,
  gender: faker.helpers.arrayElement(["male", "female"] as const),
  school: faker.helpers.arrayElement([
    "CAXITO",
    "MALANJE",
    "NDALATANDO",
    "ONDJIVA",
  ] as const),
  grade: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  maxMenteeNumber: faker.helpers.arrayElement([
    faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    undefined,
  ]),
  difficulties: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
    undefined,
  ]),
  skills: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
    undefined,
  ]),
  image: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  province: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  municipality: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  schoolYear: faker.helpers.arrayElement([
    faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    undefined,
  ]),
  portfolio: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  emotions: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
    undefined,
  ]),
  programs: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getUsersUpdateResponseMock = (
  overrideResponse: Partial<UserResponseDto> = {},
): UserResponseDto => ({
  uid: faker.string.alpha({ length: { min: 10, max: 20 } }),
  email: faker.string.alpha({ length: { min: 10, max: 20 } }),
  fullName: faker.string.alpha({ length: { min: 10, max: 20 } }),
  role: faker.helpers.arrayElement([
    "mentor",
    "mentee",
    "coordinator",
  ] as const),
  cellphone: faker.string.alpha({ length: { min: 10, max: 20 } }),
  birth: `${faker.date.past().toISOString().split(".")[0]}Z`,
  gender: faker.helpers.arrayElement(["male", "female"] as const),
  school: faker.helpers.arrayElement([
    "CAXITO",
    "MALANJE",
    "NDALATANDO",
    "ONDJIVA",
  ] as const),
  grade: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  maxMenteeNumber: faker.helpers.arrayElement([
    faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    undefined,
  ]),
  difficulties: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
    undefined,
  ]),
  skills: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
    undefined,
  ]),
  image: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  province: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  municipality: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  schoolYear: faker.helpers.arrayElement([
    faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    undefined,
  ]),
  portfolio: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  emotions: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
    undefined,
  ]),
  programs: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getUsersFindAllMockHandler = (
  overrideResponse?:
    | UsersListResponseDto
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<UsersListResponseDto> | UsersListResponseDto),
) => {
  return http.get("*/api/users", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getUsersFindAllResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getUsersFindByRoleMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.get("*/api/users/role/:role", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getUsersFindBySchoolMockHandler = (
  overrideResponse?:
    | UserResponseDto
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<UserResponseDto> | UserResponseDto),
) => {
  return http.get("*/api/users/school/:school", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getUsersFindBySchoolResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getUsersFindOneMockHandler = (
  overrideResponse?:
    | UserResponseDto
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<UserResponseDto> | UserResponseDto),
) => {
  return http.get("*/api/users/:uid", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getUsersFindOneResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getUsersUpdateMockHandler = (
  overrideResponse?:
    | UserResponseDto
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<UserResponseDto> | UserResponseDto),
) => {
  return http.put("*/api/users/:uid", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getUsersUpdateResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getUsersRemoveMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.delete("*/api/users/:uid", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getUsersUpdateImageMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.put("*/api/users/:uid/image", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getConnectionsSendConnectionRequestMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.post("*/api/users/:userId/connections/send", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 201 });
  });
};

export const getConnectionsAcceptConnectionRequestMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.put(
    "*/api/users/:userId/connections/:connectionId/accept",
    async (info) => {
      await delay(1000);
      if (typeof overrideResponse === "function") {
        await overrideResponse(info);
      }
      return new HttpResponse(null, { status: 200 });
    },
  );
};

export const getConnectionsRejectConnectionRequestMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.put(
    "*/api/users/:userId/connections/:connectionId/reject",
    async (info) => {
      await delay(1000);
      if (typeof overrideResponse === "function") {
        await overrideResponse(info);
      }
      return new HttpResponse(null, { status: 200 });
    },
  );
};

export const getConnectionsBlockUserMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.put(
    "*/api/users/:userId/connections/:connectionId/block",
    async (info) => {
      await delay(1000);
      if (typeof overrideResponse === "function") {
        await overrideResponse(info);
      }
      return new HttpResponse(null, { status: 200 });
    },
  );
};

export const getConnectionsRemoveConnectionMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.delete(
    "*/api/users/:userId/connections/:connectionId",
    async (info) => {
      await delay(1000);
      if (typeof overrideResponse === "function") {
        await overrideResponse(info);
      }
      return new HttpResponse(null, { status: 200 });
    },
  );
};

export const getConnectionsGetUserConnectionsMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.get("*/api/users/:userId/connections", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getConnectionsGetConnectionStatsMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.get("*/api/users/:userId/connections/stats", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getConnectionsGetConnectionSuggestionsMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.get(
    "*/api/users/:userId/connections/suggestions",
    async (info) => {
      await delay(1000);
      if (typeof overrideResponse === "function") {
        await overrideResponse(info);
      }
      return new HttpResponse(null, { status: 200 });
    },
  );
};

export const getConnectionsGetPendingConnectionsMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.get("*/api/users/:userId/connections/pending", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getConnectionsGetFriendsMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.get("*/api/users/:userId/connections/friends", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getConnectionsGetMutualConnectionsMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.get(
    "*/api/users/:userId/connections/mutual/:otherUserId",
    async (info) => {
      await delay(1000);
      if (typeof overrideResponse === "function") {
        await overrideResponse(info);
      }
      return new HttpResponse(null, { status: 200 });
    },
  );
};
export const getUsersMock = () => [
  getUsersFindAllMockHandler(),
  getUsersFindByRoleMockHandler(),
  getUsersFindBySchoolMockHandler(),
  getUsersFindOneMockHandler(),
  getUsersUpdateMockHandler(),
  getUsersRemoveMockHandler(),
  getUsersUpdateImageMockHandler(),
  getConnectionsSendConnectionRequestMockHandler(),
  getConnectionsAcceptConnectionRequestMockHandler(),
  getConnectionsRejectConnectionRequestMockHandler(),
  getConnectionsBlockUserMockHandler(),
  getConnectionsRemoveConnectionMockHandler(),
  getConnectionsGetUserConnectionsMockHandler(),
  getConnectionsGetConnectionStatsMockHandler(),
  getConnectionsGetConnectionSuggestionsMockHandler(),
  getConnectionsGetPendingConnectionsMockHandler(),
  getConnectionsGetFriendsMockHandler(),
  getConnectionsGetMutualConnectionsMockHandler(),
];

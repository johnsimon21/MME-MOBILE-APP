/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * MME API Documentation
 * 
      API documentation for Meu Mentor Eiffel system
      
      ## Authentication
      This API uses Firebase Authentication with Bearer tokens.
      
      ## Base URL
      - Development: http://localhost:3000/api
      - Production: https://your-domain.com/api
      
      ## Rate Limiting
      - 100 requests per 15 minutes per IP
      - Additional limits may apply to specific endpoints
      
      ## Error Handling
      All endpoints return consistent error responses with proper HTTP status codes.
    
 * OpenAPI spec version: 1.0.0
 */
import { faker } from "@faker-js/faker";

import { HttpResponse, delay, http } from "msw";

import type {
  BulkSettingsUpdateResponseDto,
  SettingsCategoryResponseDto,
  UserSettingsResponseDto,
} from ".././model";

export const getSettingsGetUserSettingsResponseMock = (
  overrideResponse: Partial<UserSettingsResponseDto> = {},
): UserSettingsResponseDto => ({ ...overrideResponse });

export const getSettingsUpdateUserSettingsResponseMock = (
  overrideResponse: Partial<UserSettingsResponseDto> = {},
): UserSettingsResponseDto => ({ ...overrideResponse });

export const getSettingsResetUserSettingsResponseMock = (
  overrideResponse: Partial<UserSettingsResponseDto> = {},
): UserSettingsResponseDto => ({ ...overrideResponse });

export const getSettingsGetSettingsCategoriesResponseMock =
  (): SettingsCategoryResponseDto[] =>
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({}));

export const getSettingsBulkUpdateSettingsResponseMock = (
  overrideResponse: Partial<BulkSettingsUpdateResponseDto> = {},
): BulkSettingsUpdateResponseDto => ({ ...overrideResponse });

export const getSettingsImportUserSettingsResponseMock = (
  overrideResponse: Partial<UserSettingsResponseDto> = {},
): UserSettingsResponseDto => ({ ...overrideResponse });

export const getSettingsGetMySettingsResponseMock = (
  overrideResponse: Partial<UserSettingsResponseDto> = {},
): UserSettingsResponseDto => ({ ...overrideResponse });

export const getSettingsUpdateMySettingsResponseMock = (
  overrideResponse: Partial<UserSettingsResponseDto> = {},
): UserSettingsResponseDto => ({ ...overrideResponse });

export const getSettingsResetMySettingsResponseMock = (
  overrideResponse: Partial<UserSettingsResponseDto> = {},
): UserSettingsResponseDto => ({ ...overrideResponse });

export const getSettingsGetMySettingsCategoriesResponseMock =
  (): SettingsCategoryResponseDto[] =>
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({}));

export const getSettingsImportMySettingsResponseMock = (
  overrideResponse: Partial<UserSettingsResponseDto> = {},
): UserSettingsResponseDto => ({ ...overrideResponse });

export const getSettingsGetUserSettingsMockHandler = (
  overrideResponse?:
    | UserSettingsResponseDto
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<UserSettingsResponseDto> | UserSettingsResponseDto),
) => {
  return http.get("*/api/settings/users/:userId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getSettingsGetUserSettingsResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getSettingsUpdateUserSettingsMockHandler = (
  overrideResponse?:
    | UserSettingsResponseDto
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<UserSettingsResponseDto> | UserSettingsResponseDto),
) => {
  return http.put("*/api/settings/users/:userId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getSettingsUpdateUserSettingsResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getSettingsResetUserSettingsMockHandler = (
  overrideResponse?:
    | UserSettingsResponseDto
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<UserSettingsResponseDto> | UserSettingsResponseDto),
) => {
  return http.post("*/api/settings/users/:userId/reset", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getSettingsResetUserSettingsResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getSettingsGetSettingsCategoriesMockHandler = (
  overrideResponse?:
    | SettingsCategoryResponseDto[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<SettingsCategoryResponseDto[]>
        | SettingsCategoryResponseDto[]),
) => {
  return http.get("*/api/settings/users/:userId/categories", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getSettingsGetSettingsCategoriesResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getSettingsBulkUpdateSettingsMockHandler = (
  overrideResponse?:
    | BulkSettingsUpdateResponseDto
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) =>
        | Promise<BulkSettingsUpdateResponseDto>
        | BulkSettingsUpdateResponseDto),
) => {
  return http.post("*/api/settings/bulk-update", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getSettingsBulkUpdateSettingsResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getSettingsExportUserSettingsMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.get("*/api/settings/users/:userId/export", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getSettingsImportUserSettingsMockHandler = (
  overrideResponse?:
    | UserSettingsResponseDto
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<UserSettingsResponseDto> | UserSettingsResponseDto),
) => {
  return http.post("*/api/settings/users/:userId/import", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getSettingsImportUserSettingsResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getSettingsGetMySettingsMockHandler = (
  overrideResponse?:
    | UserSettingsResponseDto
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<UserSettingsResponseDto> | UserSettingsResponseDto),
) => {
  return http.get("*/api/settings/me", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getSettingsGetMySettingsResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getSettingsUpdateMySettingsMockHandler = (
  overrideResponse?:
    | UserSettingsResponseDto
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<UserSettingsResponseDto> | UserSettingsResponseDto),
) => {
  return http.put("*/api/settings/me", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getSettingsUpdateMySettingsResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getSettingsResetMySettingsMockHandler = (
  overrideResponse?:
    | UserSettingsResponseDto
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<UserSettingsResponseDto> | UserSettingsResponseDto),
) => {
  return http.post("*/api/settings/me/reset", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getSettingsResetMySettingsResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getSettingsGetMySettingsCategoriesMockHandler = (
  overrideResponse?:
    | SettingsCategoryResponseDto[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<SettingsCategoryResponseDto[]>
        | SettingsCategoryResponseDto[]),
) => {
  return http.get("*/api/settings/me/categories", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getSettingsGetMySettingsCategoriesResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getSettingsExportMySettingsMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.get("*/api/settings/me/export", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getSettingsImportMySettingsMockHandler = (
  overrideResponse?:
    | UserSettingsResponseDto
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<UserSettingsResponseDto> | UserSettingsResponseDto),
) => {
  return http.post("*/api/settings/me/import", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getSettingsImportMySettingsResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};
export const getSettingsMock = () => [
  getSettingsGetUserSettingsMockHandler(),
  getSettingsUpdateUserSettingsMockHandler(),
  getSettingsResetUserSettingsMockHandler(),
  getSettingsGetSettingsCategoriesMockHandler(),
  getSettingsBulkUpdateSettingsMockHandler(),
  getSettingsExportUserSettingsMockHandler(),
  getSettingsImportUserSettingsMockHandler(),
  getSettingsGetMySettingsMockHandler(),
  getSettingsUpdateMySettingsMockHandler(),
  getSettingsResetMySettingsMockHandler(),
  getSettingsGetMySettingsCategoriesMockHandler(),
  getSettingsExportMySettingsMockHandler(),
  getSettingsImportMySettingsMockHandler(),
];

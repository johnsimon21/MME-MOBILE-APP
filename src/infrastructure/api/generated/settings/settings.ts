/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * MME API Documentation
 * 
      API documentation for Meu Mentor Eiffel system
      
      ## Authentication
      This API uses Firebase Authentication with Bearer tokens.
      
      ## Base URL
      - Development: http://localhost:3000/api
      - Production: https://your-domain.com/api
      
      ## Rate Limiting
      - 100 requests per 15 minutes per IP
      - Additional limits may apply to specific endpoints
      
      ## Error Handling
      All endpoints return consistent error responses with proper HTTP status codes.
    
 * OpenAPI spec version: 1.0.0
 */
import type {
  BulkSettingsUpdateDto,
  BulkSettingsUpdateResponseDto,
  SettingsCategoryResponseDto,
  UpdateUserSettingsDto,
  UserSettingsResponseDto,
} from ".././model";

import { customInstance } from "../../custom-instance";

export const getSettings = () => {
  /**
   * @summary Get user settings
   */
  const settingsGetUserSettings = (userId: string) => {
    return customInstance<UserSettingsResponseDto>({
      url: `/api/settings/users/${userId}`,
      method: "GET",
    });
  };
  /**
   * @summary Update user settings
   */
  const settingsUpdateUserSettings = (
    userId: string,
    updateUserSettingsDto: UpdateUserSettingsDto,
  ) => {
    return customInstance<UserSettingsResponseDto>({
      url: `/api/settings/users/${userId}`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: updateUserSettingsDto,
    });
  };
  /**
   * @summary Reset user settings to default
   */
  const settingsResetUserSettings = (userId: string) => {
    return customInstance<UserSettingsResponseDto>({
      url: `/api/settings/users/${userId}/reset`,
      method: "POST",
    });
  };
  /**
   * @summary Get settings categories with current values
   */
  const settingsGetSettingsCategories = (userId: string) => {
    return customInstance<SettingsCategoryResponseDto[]>({
      url: `/api/settings/users/${userId}/categories`,
      method: "GET",
    });
  };
  /**
   * Only coordinators can perform bulk updates on user settings
   * @summary Bulk update settings for multiple users
   */
  const settingsBulkUpdateSettings = (
    bulkSettingsUpdateDto: BulkSettingsUpdateDto,
  ) => {
    return customInstance<BulkSettingsUpdateResponseDto>({
      url: `/api/settings/bulk-update`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: bulkSettingsUpdateDto,
    });
  };
  /**
   * @summary Export user settings
   */
  const settingsExportUserSettings = (userId: string) => {
    return customInstance<void>({
      url: `/api/settings/users/${userId}/export`,
      method: "GET",
    });
  };
  /**
   * @summary Import user settings
   */
  const settingsImportUserSettings = (userId: string) => {
    return customInstance<UserSettingsResponseDto>({
      url: `/api/settings/users/${userId}/import`,
      method: "POST",
    });
  };
  /**
   * Get settings for the currently authenticated user
   * @summary Get current user settings
   */
  const settingsGetMySettings = () => {
    return customInstance<UserSettingsResponseDto>({
      url: `/api/settings/me`,
      method: "GET",
    });
  };
  /**
   * Update settings for the currently authenticated user
   * @summary Update current user settings
   */
  const settingsUpdateMySettings = (
    updateUserSettingsDto: UpdateUserSettingsDto,
  ) => {
    return customInstance<UserSettingsResponseDto>({
      url: `/api/settings/me`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: updateUserSettingsDto,
    });
  };
  /**
   * Reset settings to default for the currently authenticated user
   * @summary Reset current user settings to default
   */
  const settingsResetMySettings = () => {
    return customInstance<UserSettingsResponseDto>({
      url: `/api/settings/me/reset`,
      method: "POST",
    });
  };
  /**
   * Get settings categories for the currently authenticated user
   * @summary Get current user settings categories
   */
  const settingsGetMySettingsCategories = () => {
    return customInstance<SettingsCategoryResponseDto[]>({
      url: `/api/settings/me/categories`,
      method: "GET",
    });
  };
  /**
   * Export settings for the currently authenticated user
   * @summary Export current user settings
   */
  const settingsExportMySettings = () => {
    return customInstance<void>({
      url: `/api/settings/me/export`,
      method: "GET",
    });
  };
  /**
   * Import settings for the currently authenticated user
   * @summary Import current user settings
   */
  const settingsImportMySettings = () => {
    return customInstance<UserSettingsResponseDto>({
      url: `/api/settings/me/import`,
      method: "POST",
    });
  };
  return {
    settingsGetUserSettings,
    settingsUpdateUserSettings,
    settingsResetUserSettings,
    settingsGetSettingsCategories,
    settingsBulkUpdateSettings,
    settingsExportUserSettings,
    settingsImportUserSettings,
    settingsGetMySettings,
    settingsUpdateMySettings,
    settingsResetMySettings,
    settingsGetMySettingsCategories,
    settingsExportMySettings,
    settingsImportMySettings,
  };
};
export type SettingsGetUserSettingsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSettings>["settingsGetUserSettings"]>>
>;
export type SettingsUpdateUserSettingsResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getSettings>["settingsUpdateUserSettings"]>
  >
>;
export type SettingsResetUserSettingsResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getSettings>["settingsResetUserSettings"]>
  >
>;
export type SettingsGetSettingsCategoriesResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getSettings>["settingsGetSettingsCategories"]>
  >
>;
export type SettingsBulkUpdateSettingsResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getSettings>["settingsBulkUpdateSettings"]>
  >
>;
export type SettingsExportUserSettingsResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getSettings>["settingsExportUserSettings"]>
  >
>;
export type SettingsImportUserSettingsResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getSettings>["settingsImportUserSettings"]>
  >
>;
export type SettingsGetMySettingsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSettings>["settingsGetMySettings"]>>
>;
export type SettingsUpdateMySettingsResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getSettings>["settingsUpdateMySettings"]>
  >
>;
export type SettingsResetMySettingsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSettings>["settingsResetMySettings"]>>
>;
export type SettingsGetMySettingsCategoriesResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getSettings>["settingsGetMySettingsCategories"]
    >
  >
>;
export type SettingsExportMySettingsResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getSettings>["settingsExportMySettings"]>
  >
>;
export type SettingsImportMySettingsResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getSettings>["settingsImportMySettings"]>
  >
>;
